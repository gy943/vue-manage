{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isTypedArray, clone, createHashMap, isArray, isObject, isArrayLike, hasOwn, assert, each, map, isNumber, isString } from 'zrender/lib/core/util';\nimport { SOURCE_FORMAT_ORIGINAL, SERIES_LAYOUT_BY_COLUMN, SOURCE_FORMAT_UNKNOWN, SOURCE_FORMAT_KEYED_COLUMNS, SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW } from '../util/types';\nimport { getDataItemValue } from '../util/model';\n; // @inner\n\nvar SourceImpl =\n/** @class */\nfunction () {\n  // readonly frozen: boolean;\n  function SourceImpl(fields) {\n    this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);\n    this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN; // Visit config\n\n    this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;\n    this.startIndex = fields.startIndex || 0;\n    this.dimensionsDefine = fields.dimensionsDefine;\n    this.dimensionsDetectedCount = fields.dimensionsDetectedCount;\n    this.encodeDefine = fields.encodeDefine;\n    this.metaRawOption = fields.metaRawOption;\n  }\n\n  return SourceImpl;\n}();\n\nexport function isSourceInstance(val) {\n  return val instanceof SourceImpl;\n}\nexport function createSource(sourceData, thisMetaRawOption, // can be null. If not provided, auto detect it from `sourceData`.\nsourceFormat, encodeDefine // can be null\n) {\n  sourceFormat = sourceFormat || detectSourceFormat(sourceData);\n  var seriesLayoutBy = thisMetaRawOption.seriesLayoutBy;\n  var determined = determineSourceDimensions(sourceData, sourceFormat, seriesLayoutBy, thisMetaRawOption.sourceHeader, thisMetaRawOption.dimensions);\n  var source = new SourceImpl({\n    data: sourceData,\n    sourceFormat: sourceFormat,\n    seriesLayoutBy: seriesLayoutBy,\n    dimensionsDefine: determined.dimensionsDefine,\n    startIndex: determined.startIndex,\n    dimensionsDetectedCount: determined.dimensionsDetectedCount,\n    encodeDefine: makeEncodeDefine(encodeDefine),\n    metaRawOption: clone(thisMetaRawOption)\n  });\n  return source;\n}\n/**\n * Wrap original series data for some compatibility cases.\n */\n\nexport function createSourceFromSeriesDataOption(data) {\n  return new SourceImpl({\n    data: data,\n    sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL\n  });\n}\n/**\n * Clone source but excludes source data.\n */\n\nexport function cloneSourceShallow(source) {\n  return new SourceImpl({\n    data: source.data,\n    sourceFormat: source.sourceFormat,\n    seriesLayoutBy: source.seriesLayoutBy,\n    dimensionsDefine: clone(source.dimensionsDefine),\n    startIndex: source.startIndex,\n    dimensionsDetectedCount: source.dimensionsDetectedCount,\n    encodeDefine: makeEncodeDefine(source.encodeDefine)\n  });\n}\n\nfunction makeEncodeDefine(encodeDefine) {\n  // null means user not specify `series.encode`.\n  return encodeDefine ? createHashMap(encodeDefine) : null;\n}\n/**\n * Note: An empty array will be detected as `SOURCE_FORMAT_ARRAY_ROWS`.\n */\n\n\nexport function detectSourceFormat(data) {\n  var sourceFormat = SOURCE_FORMAT_UNKNOWN;\n\n  if (isTypedArray(data)) {\n    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;\n  } else if (isArray(data)) {\n    // FIXME Whether tolerate null in top level array?\n    if (data.length === 0) {\n      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n    }\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var item = data[i];\n\n      if (item == null) {\n        continue;\n      } else if (isArray(item)) {\n        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n        break;\n      } else if (isObject(item)) {\n        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;\n        break;\n      }\n    }\n  } else if (isObject(data)) {\n    for (var key in data) {\n      if (hasOwn(data, key) && isArrayLike(data[key])) {\n        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;\n        break;\n      }\n    }\n  }\n\n  return sourceFormat;\n}\n/**\n * Determine the source definitions from data standalone dimensions definitions\n * are not specified.\n */\n\nfunction determineSourceDimensions(data, sourceFormat, seriesLayoutBy, sourceHeader, // standalone raw dimensions definition, like:\n// {\n//     dimensions: ['aa', 'bb', { name: 'cc', type: 'time' }]\n// }\n// in `dataset` or `series`\ndimensionsDefine) {\n  var dimensionsDetectedCount;\n  var startIndex; // PEDING: could data be null/undefined here?\n  // currently, if `dataset.source` not specified, error thrown.\n  // if `series.data` not specified, nothing rendered without error thrown.\n  // Should test these cases.\n\n  if (!data) {\n    return {\n      dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n      startIndex: startIndex,\n      dimensionsDetectedCount: dimensionsDetectedCount\n    };\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data; // Rule: Most of the first line are string: it is header.\n    // Caution: consider a line with 5 string and 1 number,\n    // it still can not be sure it is a head, because the\n    // 5 string may be 5 values of category columns.\n\n    if (sourceHeader === 'auto' || sourceHeader == null) {\n      arrayRowsTravelFirst(function (val) {\n        // '-' is regarded as null/undefined.\n        if (val != null && val !== '-') {\n          if (isString(val)) {\n            startIndex == null && (startIndex = 1);\n          } else {\n            startIndex = 0;\n          }\n        } // 10 is an experience number, avoid long loop.\n\n      }, seriesLayoutBy, dataArrayRows, 10);\n    } else {\n      startIndex = isNumber(sourceHeader) ? sourceHeader : sourceHeader ? 1 : 0;\n    }\n\n    if (!dimensionsDefine && startIndex === 1) {\n      dimensionsDefine = [];\n      arrayRowsTravelFirst(function (val, index) {\n        dimensionsDefine[index] = val != null ? val + '' : '';\n      }, seriesLayoutBy, dataArrayRows, Infinity);\n    }\n\n    dimensionsDetectedCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? dataArrayRows.length : dataArrayRows[0] ? dataArrayRows[0].length : null;\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = objectRowsCollectDimensions(data);\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = [];\n      each(data, function (colArr, key) {\n        dimensionsDefine.push(key);\n      });\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var value0 = getDataItemValue(data[0]);\n    dimensionsDetectedCount = isArray(value0) && value0.length || 1;\n  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!!dimensionsDefine, 'dimensions must be given if data is TypedArray.');\n    }\n  }\n\n  return {\n    startIndex: startIndex,\n    dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n    dimensionsDetectedCount: dimensionsDetectedCount\n  };\n}\n\nfunction objectRowsCollectDimensions(data) {\n  var firstIndex = 0;\n  var obj;\n\n  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line\n\n\n  if (obj) {\n    var dimensions_1 = [];\n    each(obj, function (value, key) {\n      dimensions_1.push(key);\n    });\n    return dimensions_1;\n  }\n} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],\n// which is reasonable. But dimension name is duplicated.\n// Returns undefined or an array contains only object without null/undefiend or string.\n\n\nfunction normalizeDimensionsOption(dimensionsDefine) {\n  if (!dimensionsDefine) {\n    // The meaning of null/undefined is different from empty array.\n    return;\n  }\n\n  var nameMap = createHashMap();\n  return map(dimensionsDefine, function (rawItem, index) {\n    rawItem = isObject(rawItem) ? rawItem : {\n      name: rawItem\n    }; // Other fields will be discarded.\n\n    var item = {\n      name: rawItem.name,\n      displayName: rawItem.displayName,\n      type: rawItem.type\n    }; // User can set null in dimensions.\n    // We dont auto specify name, othewise a given name may\n    // cause it be refered unexpectedly.\n\n    if (item.name == null) {\n      return item;\n    } // Also consider number form like 2012.\n\n\n    item.name += ''; // User may also specify displayName.\n    // displayName will always exists except user not\n    // specified or dim name is not specified or detected.\n    // (A auto generated dim name will not be used as\n    // displayName).\n\n    if (item.displayName == null) {\n      item.displayName = item.name;\n    }\n\n    var exist = nameMap.get(item.name);\n\n    if (!exist) {\n      nameMap.set(item.name, {\n        count: 1\n      });\n    } else {\n      item.name += '-' + exist.count++;\n    }\n\n    return item;\n  });\n}\n\nfunction arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {\n  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      cb(data[i] ? data[i][0] : null, i);\n    }\n  } else {\n    var value0 = data[0] || [];\n\n    for (var i = 0; i < value0.length && i < maxLoop; i++) {\n      cb(value0[i], i);\n    }\n  }\n}","map":{"version":3,"names":["isTypedArray","clone","createHashMap","isArray","isObject","isArrayLike","hasOwn","assert","each","map","isNumber","isString","SOURCE_FORMAT_ORIGINAL","SERIES_LAYOUT_BY_COLUMN","SOURCE_FORMAT_UNKNOWN","SOURCE_FORMAT_KEYED_COLUMNS","SOURCE_FORMAT_TYPED_ARRAY","SOURCE_FORMAT_ARRAY_ROWS","SOURCE_FORMAT_OBJECT_ROWS","SERIES_LAYOUT_BY_ROW","getDataItemValue","SourceImpl","fields","data","sourceFormat","seriesLayoutBy","startIndex","dimensionsDefine","dimensionsDetectedCount","encodeDefine","metaRawOption","isSourceInstance","val","createSource","sourceData","thisMetaRawOption","detectSourceFormat","determined","determineSourceDimensions","sourceHeader","dimensions","source","makeEncodeDefine","createSourceFromSeriesDataOption","cloneSourceShallow","length","i","len","item","key","normalizeDimensionsOption","dataArrayRows","arrayRowsTravelFirst","index","Infinity","objectRowsCollectDimensions","colArr","push","value0","process","env","NODE_ENV","firstIndex","obj","dimensions_1","value","nameMap","rawItem","name","displayName","type","exist","get","set","count","cb","maxLoop"],"sources":["E:/school/qianduan/web/vue-manage/node_modules/echarts/lib/data/Source.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isTypedArray, clone, createHashMap, isArray, isObject, isArrayLike, hasOwn, assert, each, map, isNumber, isString } from 'zrender/lib/core/util';\nimport { SOURCE_FORMAT_ORIGINAL, SERIES_LAYOUT_BY_COLUMN, SOURCE_FORMAT_UNKNOWN, SOURCE_FORMAT_KEYED_COLUMNS, SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW } from '../util/types';\nimport { getDataItemValue } from '../util/model';\n; // @inner\n\nvar SourceImpl =\n/** @class */\nfunction () {\n  // readonly frozen: boolean;\n  function SourceImpl(fields) {\n    this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);\n    this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN; // Visit config\n\n    this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;\n    this.startIndex = fields.startIndex || 0;\n    this.dimensionsDefine = fields.dimensionsDefine;\n    this.dimensionsDetectedCount = fields.dimensionsDetectedCount;\n    this.encodeDefine = fields.encodeDefine;\n    this.metaRawOption = fields.metaRawOption;\n  }\n\n  return SourceImpl;\n}();\n\nexport function isSourceInstance(val) {\n  return val instanceof SourceImpl;\n}\nexport function createSource(sourceData, thisMetaRawOption, // can be null. If not provided, auto detect it from `sourceData`.\nsourceFormat, encodeDefine // can be null\n) {\n  sourceFormat = sourceFormat || detectSourceFormat(sourceData);\n  var seriesLayoutBy = thisMetaRawOption.seriesLayoutBy;\n  var determined = determineSourceDimensions(sourceData, sourceFormat, seriesLayoutBy, thisMetaRawOption.sourceHeader, thisMetaRawOption.dimensions);\n  var source = new SourceImpl({\n    data: sourceData,\n    sourceFormat: sourceFormat,\n    seriesLayoutBy: seriesLayoutBy,\n    dimensionsDefine: determined.dimensionsDefine,\n    startIndex: determined.startIndex,\n    dimensionsDetectedCount: determined.dimensionsDetectedCount,\n    encodeDefine: makeEncodeDefine(encodeDefine),\n    metaRawOption: clone(thisMetaRawOption)\n  });\n  return source;\n}\n/**\n * Wrap original series data for some compatibility cases.\n */\n\nexport function createSourceFromSeriesDataOption(data) {\n  return new SourceImpl({\n    data: data,\n    sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL\n  });\n}\n/**\n * Clone source but excludes source data.\n */\n\nexport function cloneSourceShallow(source) {\n  return new SourceImpl({\n    data: source.data,\n    sourceFormat: source.sourceFormat,\n    seriesLayoutBy: source.seriesLayoutBy,\n    dimensionsDefine: clone(source.dimensionsDefine),\n    startIndex: source.startIndex,\n    dimensionsDetectedCount: source.dimensionsDetectedCount,\n    encodeDefine: makeEncodeDefine(source.encodeDefine)\n  });\n}\n\nfunction makeEncodeDefine(encodeDefine) {\n  // null means user not specify `series.encode`.\n  return encodeDefine ? createHashMap(encodeDefine) : null;\n}\n/**\n * Note: An empty array will be detected as `SOURCE_FORMAT_ARRAY_ROWS`.\n */\n\n\nexport function detectSourceFormat(data) {\n  var sourceFormat = SOURCE_FORMAT_UNKNOWN;\n\n  if (isTypedArray(data)) {\n    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;\n  } else if (isArray(data)) {\n    // FIXME Whether tolerate null in top level array?\n    if (data.length === 0) {\n      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n    }\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var item = data[i];\n\n      if (item == null) {\n        continue;\n      } else if (isArray(item)) {\n        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n        break;\n      } else if (isObject(item)) {\n        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;\n        break;\n      }\n    }\n  } else if (isObject(data)) {\n    for (var key in data) {\n      if (hasOwn(data, key) && isArrayLike(data[key])) {\n        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;\n        break;\n      }\n    }\n  }\n\n  return sourceFormat;\n}\n/**\n * Determine the source definitions from data standalone dimensions definitions\n * are not specified.\n */\n\nfunction determineSourceDimensions(data, sourceFormat, seriesLayoutBy, sourceHeader, // standalone raw dimensions definition, like:\n// {\n//     dimensions: ['aa', 'bb', { name: 'cc', type: 'time' }]\n// }\n// in `dataset` or `series`\ndimensionsDefine) {\n  var dimensionsDetectedCount;\n  var startIndex; // PEDING: could data be null/undefined here?\n  // currently, if `dataset.source` not specified, error thrown.\n  // if `series.data` not specified, nothing rendered without error thrown.\n  // Should test these cases.\n\n  if (!data) {\n    return {\n      dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n      startIndex: startIndex,\n      dimensionsDetectedCount: dimensionsDetectedCount\n    };\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data; // Rule: Most of the first line are string: it is header.\n    // Caution: consider a line with 5 string and 1 number,\n    // it still can not be sure it is a head, because the\n    // 5 string may be 5 values of category columns.\n\n    if (sourceHeader === 'auto' || sourceHeader == null) {\n      arrayRowsTravelFirst(function (val) {\n        // '-' is regarded as null/undefined.\n        if (val != null && val !== '-') {\n          if (isString(val)) {\n            startIndex == null && (startIndex = 1);\n          } else {\n            startIndex = 0;\n          }\n        } // 10 is an experience number, avoid long loop.\n\n      }, seriesLayoutBy, dataArrayRows, 10);\n    } else {\n      startIndex = isNumber(sourceHeader) ? sourceHeader : sourceHeader ? 1 : 0;\n    }\n\n    if (!dimensionsDefine && startIndex === 1) {\n      dimensionsDefine = [];\n      arrayRowsTravelFirst(function (val, index) {\n        dimensionsDefine[index] = val != null ? val + '' : '';\n      }, seriesLayoutBy, dataArrayRows, Infinity);\n    }\n\n    dimensionsDetectedCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? dataArrayRows.length : dataArrayRows[0] ? dataArrayRows[0].length : null;\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = objectRowsCollectDimensions(data);\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = [];\n      each(data, function (colArr, key) {\n        dimensionsDefine.push(key);\n      });\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var value0 = getDataItemValue(data[0]);\n    dimensionsDetectedCount = isArray(value0) && value0.length || 1;\n  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!!dimensionsDefine, 'dimensions must be given if data is TypedArray.');\n    }\n  }\n\n  return {\n    startIndex: startIndex,\n    dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n    dimensionsDetectedCount: dimensionsDetectedCount\n  };\n}\n\nfunction objectRowsCollectDimensions(data) {\n  var firstIndex = 0;\n  var obj;\n\n  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line\n\n\n  if (obj) {\n    var dimensions_1 = [];\n    each(obj, function (value, key) {\n      dimensions_1.push(key);\n    });\n    return dimensions_1;\n  }\n} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],\n// which is reasonable. But dimension name is duplicated.\n// Returns undefined or an array contains only object without null/undefiend or string.\n\n\nfunction normalizeDimensionsOption(dimensionsDefine) {\n  if (!dimensionsDefine) {\n    // The meaning of null/undefined is different from empty array.\n    return;\n  }\n\n  var nameMap = createHashMap();\n  return map(dimensionsDefine, function (rawItem, index) {\n    rawItem = isObject(rawItem) ? rawItem : {\n      name: rawItem\n    }; // Other fields will be discarded.\n\n    var item = {\n      name: rawItem.name,\n      displayName: rawItem.displayName,\n      type: rawItem.type\n    }; // User can set null in dimensions.\n    // We dont auto specify name, othewise a given name may\n    // cause it be refered unexpectedly.\n\n    if (item.name == null) {\n      return item;\n    } // Also consider number form like 2012.\n\n\n    item.name += ''; // User may also specify displayName.\n    // displayName will always exists except user not\n    // specified or dim name is not specified or detected.\n    // (A auto generated dim name will not be used as\n    // displayName).\n\n    if (item.displayName == null) {\n      item.displayName = item.name;\n    }\n\n    var exist = nameMap.get(item.name);\n\n    if (!exist) {\n      nameMap.set(item.name, {\n        count: 1\n      });\n    } else {\n      item.name += '-' + exist.count++;\n    }\n\n    return item;\n  });\n}\n\nfunction arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {\n  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      cb(data[i] ? data[i][0] : null, i);\n    }\n  } else {\n    var value0 = data[0] || [];\n\n    for (var i = 0; i < value0.length && i < maxLoop; i++) {\n      cb(value0[i], i);\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}