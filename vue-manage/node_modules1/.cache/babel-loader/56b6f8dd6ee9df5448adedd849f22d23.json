{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { map, isString, isFunction, eqNaN, isRegExp } from 'zrender/lib/core/util';\nvar ECHARTS_PREFIX = '[ECharts] ';\nvar storedLogs = {};\nvar hasConsole = typeof console !== 'undefined' // eslint-disable-next-line\n&& console.warn && console.log;\nexport function log(str) {\n  if (hasConsole) {\n    // eslint-disable-next-line\n    console.log(ECHARTS_PREFIX + str);\n  }\n}\nexport function warn(str) {\n  if (hasConsole) {\n    console.warn(ECHARTS_PREFIX + str);\n  }\n}\nexport function error(str) {\n  if (hasConsole) {\n    console.error(ECHARTS_PREFIX + str);\n  }\n}\nexport function deprecateLog(str) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (storedLogs[str]) {\n      // Not display duplicate message.\n      return;\n    }\n\n    if (hasConsole) {\n      storedLogs[str] = true;\n      console.warn(ECHARTS_PREFIX + 'DEPRECATED: ' + str);\n    }\n  }\n}\nexport function deprecateReplaceLog(oldOpt, newOpt, scope) {\n  if (process.env.NODE_ENV !== 'production') {\n    deprecateLog((scope ? \"[\" + scope + \"]\" : '') + (oldOpt + \" is deprecated, use \" + newOpt + \" instead.\"));\n  }\n}\nexport function consoleLog() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    /* eslint-disable no-console */\n    if (typeof console !== 'undefined' && console.log) {\n      console.log.apply(console, args);\n    }\n    /* eslint-enable no-console */\n\n  }\n}\n/**\n * If in __DEV__ environment, get console printable message for users hint.\n * Parameters are separated by ' '.\n * @usuage\n * makePrintable('This is an error on', someVar, someObj);\n *\n * @param hintInfo anything about the current execution context to hint users.\n * @throws Error\n */\n\nexport function makePrintable() {\n  var hintInfo = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    hintInfo[_i] = arguments[_i];\n  }\n\n  var msg = '';\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Fuzzy stringify for print.\n    // This code only exist in dev environment.\n    var makePrintableStringIfPossible_1 = function (val) {\n      return val === void 0 ? 'undefined' : val === Infinity ? 'Infinity' : val === -Infinity ? '-Infinity' : eqNaN(val) ? 'NaN' : val instanceof Date ? 'Date(' + val.toISOString() + ')' : isFunction(val) ? 'function () { ... }' : isRegExp(val) ? val + '' : null;\n    };\n\n    msg = map(hintInfo, function (arg) {\n      if (isString(arg)) {\n        // Print without quotation mark for some statement.\n        return arg;\n      } else {\n        var printableStr = makePrintableStringIfPossible_1(arg);\n\n        if (printableStr != null) {\n          return printableStr;\n        } else if (typeof JSON !== 'undefined' && JSON.stringify) {\n          try {\n            return JSON.stringify(arg, function (n, val) {\n              var printableStr = makePrintableStringIfPossible_1(val);\n              return printableStr == null ? val : printableStr;\n            }); // In most cases the info object is small, so do not line break.\n          } catch (err) {\n            return '?';\n          }\n        } else {\n          return '?';\n        }\n      }\n    }).join(' ');\n  }\n\n  return msg;\n}\n/**\n * @throws Error\n */\n\nexport function throwError(msg) {\n  throw new Error(msg);\n}","map":{"version":3,"names":["map","isString","isFunction","eqNaN","isRegExp","ECHARTS_PREFIX","storedLogs","hasConsole","console","warn","log","str","error","deprecateLog","process","env","NODE_ENV","deprecateReplaceLog","oldOpt","newOpt","scope","consoleLog","args","_i","arguments","length","apply","makePrintable","hintInfo","msg","makePrintableStringIfPossible_1","val","Infinity","Date","toISOString","arg","printableStr","JSON","stringify","n","err","join","throwError","Error"],"sources":["E:/school/qianduan/web/vue-manage/node_modules/echarts/lib/util/log.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { map, isString, isFunction, eqNaN, isRegExp } from 'zrender/lib/core/util';\nvar ECHARTS_PREFIX = '[ECharts] ';\nvar storedLogs = {};\nvar hasConsole = typeof console !== 'undefined' // eslint-disable-next-line\n&& console.warn && console.log;\nexport function log(str) {\n  if (hasConsole) {\n    // eslint-disable-next-line\n    console.log(ECHARTS_PREFIX + str);\n  }\n}\nexport function warn(str) {\n  if (hasConsole) {\n    console.warn(ECHARTS_PREFIX + str);\n  }\n}\nexport function error(str) {\n  if (hasConsole) {\n    console.error(ECHARTS_PREFIX + str);\n  }\n}\nexport function deprecateLog(str) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (storedLogs[str]) {\n      // Not display duplicate message.\n      return;\n    }\n\n    if (hasConsole) {\n      storedLogs[str] = true;\n      console.warn(ECHARTS_PREFIX + 'DEPRECATED: ' + str);\n    }\n  }\n}\nexport function deprecateReplaceLog(oldOpt, newOpt, scope) {\n  if (process.env.NODE_ENV !== 'production') {\n    deprecateLog((scope ? \"[\" + scope + \"]\" : '') + (oldOpt + \" is deprecated, use \" + newOpt + \" instead.\"));\n  }\n}\nexport function consoleLog() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    /* eslint-disable no-console */\n    if (typeof console !== 'undefined' && console.log) {\n      console.log.apply(console, args);\n    }\n    /* eslint-enable no-console */\n\n  }\n}\n/**\n * If in __DEV__ environment, get console printable message for users hint.\n * Parameters are separated by ' '.\n * @usuage\n * makePrintable('This is an error on', someVar, someObj);\n *\n * @param hintInfo anything about the current execution context to hint users.\n * @throws Error\n */\n\nexport function makePrintable() {\n  var hintInfo = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    hintInfo[_i] = arguments[_i];\n  }\n\n  var msg = '';\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Fuzzy stringify for print.\n    // This code only exist in dev environment.\n    var makePrintableStringIfPossible_1 = function (val) {\n      return val === void 0 ? 'undefined' : val === Infinity ? 'Infinity' : val === -Infinity ? '-Infinity' : eqNaN(val) ? 'NaN' : val instanceof Date ? 'Date(' + val.toISOString() + ')' : isFunction(val) ? 'function () { ... }' : isRegExp(val) ? val + '' : null;\n    };\n\n    msg = map(hintInfo, function (arg) {\n      if (isString(arg)) {\n        // Print without quotation mark for some statement.\n        return arg;\n      } else {\n        var printableStr = makePrintableStringIfPossible_1(arg);\n\n        if (printableStr != null) {\n          return printableStr;\n        } else if (typeof JSON !== 'undefined' && JSON.stringify) {\n          try {\n            return JSON.stringify(arg, function (n, val) {\n              var printableStr = makePrintableStringIfPossible_1(val);\n              return printableStr == null ? val : printableStr;\n            }); // In most cases the info object is small, so do not line break.\n          } catch (err) {\n            return '?';\n          }\n        } else {\n          return '?';\n        }\n      }\n    }).join(' ');\n  }\n\n  return msg;\n}\n/**\n * @throws Error\n */\n\nexport function throwError(msg) {\n  throw new Error(msg);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}