{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { retrieveRawValue } from '../../data/helper/dataProvider';\nimport { formatTpl } from '../../util/format';\nimport { makePrintable } from '../../util/log';\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g;\n\nvar DataFormatMixin =\n/** @class */\nfunction () {\n  function DataFormatMixin() {}\n  /**\n   * Get params for formatter\n   */\n\n\n  DataFormatMixin.prototype.getDataParams = function (dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var style = data.getItemVisual(dataIndex, 'style');\n    var color = style && style[data.getItemVisual(dataIndex, 'drawType') || 'fill'];\n    var borderColor = style && style.stroke;\n    var mainType = this.mainType;\n    var isSeries = mainType === 'series';\n    var userOutput = data.userOutput;\n    return {\n      componentType: mainType,\n      componentSubType: this.subType,\n      componentIndex: this.componentIndex,\n      seriesType: isSeries ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: isSeries ? this.id : null,\n      seriesName: isSeries ? this.name : null,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      borderColor: borderColor,\n      dimensionNames: userOutput ? userOutput.dimensionNames : null,\n      encode: userOutput ? userOutput.encode : null,\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  };\n  /**\n   * Format label\n   * @param dataIndex\n   * @param status 'normal' by default\n   * @param dataType\n   * @param labelDimIndex Only used in some chart that\n   *        use formatter in different dimensions, like radar.\n   * @param formatter Formatter given outside.\n   * @return return null/undefined if no formatter\n   */\n\n\n  DataFormatMixin.prototype.getFormattedLabel = function (dataIndex, status, dataType, labelDimIndex, formatter, extendParams) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var params = this.getDataParams(dataIndex, dataType);\n\n    if (extendParams) {\n      params.value = extendParams.interpolatedValue;\n    }\n\n    if (labelDimIndex != null && zrUtil.isArray(params.value)) {\n      params.value = params.value[labelDimIndex];\n    }\n\n    if (!formatter) {\n      var itemModel = data.getItemModel(dataIndex); // @ts-ignore\n\n      formatter = itemModel.get(status === 'normal' ? ['label', 'formatter'] : [status, 'label', 'formatter']);\n    }\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      params.dimensionIndex = labelDimIndex;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dimStr) {\n        var len = dimStr.length;\n        var dimLoose = dimStr.charAt(0) === '[' && dimStr.charAt(len - 1) === ']' ? +dimStr.slice(1, len - 1) // Also support: '[]' => 0\n        : dimStr;\n        var val = retrieveRawValue(data, dataIndex, dimLoose);\n\n        if (extendParams && zrUtil.isArray(extendParams.interpolatedValue)) {\n          var dimInfo = data.getDimensionInfo(dimLoose);\n\n          if (dimInfo) {\n            val = extendParams.interpolatedValue[dimInfo.index];\n          }\n        }\n\n        return val != null ? val + '' : '';\n      });\n    }\n  };\n  /**\n   * Get raw value in option\n   */\n\n\n  DataFormatMixin.prototype.getRawValue = function (idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  };\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {string} [dataType]\n   */\n\n\n  DataFormatMixin.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    // Empty function\n    return;\n  };\n\n  return DataFormatMixin;\n}();\n\nexport { DataFormatMixin };\n; // PENDING: previously we accept this type when calling `formatTooltip`,\n// but guess little chance has been used outside. Do we need to backward\n// compat it?\n// type TooltipFormatResultLegacyObject = {\n//     // `html` means the markup language text, either in 'html' or 'richText'.\n//     // The name `html` is not appropriate becuase in 'richText' it is not a HTML\n//     // string. But still support it for backward compat.\n//     html: string;\n//     markers: Dictionary<ColorString>;\n// };\n\n/**\n * For backward compat, normalize the return from `formatTooltip`.\n */\n\nexport function normalizeTooltipFormatResult(result // markersExisting: Dictionary<ColorString>\n) {\n  var markupText; // let markers: Dictionary<ColorString>;\n\n  var markupFragment;\n\n  if (zrUtil.isObject(result)) {\n    if (result.type) {\n      markupFragment = result;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('The return type of `formatTooltip` is not supported: ' + makePrintable(result));\n      }\n    } // else {\n    //     markupText = (result as TooltipFormatResultLegacyObject).html;\n    //     markers = (result as TooltipFormatResultLegacyObject).markers;\n    //     if (markersExisting) {\n    //         markers = zrUtil.merge(markersExisting, markers);\n    //     }\n    // }\n\n  } else {\n    markupText = result;\n  }\n\n  return {\n    markupText: markupText,\n    // markers: markers || markersExisting,\n    markupFragment: markupFragment\n  };\n}","map":{"version":3,"names":["zrUtil","retrieveRawValue","formatTpl","makePrintable","DIMENSION_LABEL_REG","DataFormatMixin","prototype","getDataParams","dataIndex","dataType","data","getData","rawValue","getRawValue","rawDataIndex","getRawIndex","name","getName","itemOpt","getRawDataItem","style","getItemVisual","color","borderColor","stroke","mainType","isSeries","userOutput","componentType","componentSubType","subType","componentIndex","seriesType","seriesIndex","seriesId","id","seriesName","value","dimensionNames","encode","$vars","getFormattedLabel","status","labelDimIndex","formatter","extendParams","params","interpolatedValue","isArray","itemModel","getItemModel","get","dimensionIndex","str","replace","origin","dimStr","len","length","dimLoose","charAt","slice","val","dimInfo","getDimensionInfo","index","idx","formatTooltip","multipleSeries","normalizeTooltipFormatResult","result","markupText","markupFragment","isObject","type","process","env","NODE_ENV","console","warn"],"sources":["E:/school/qianduan/web/vue-manage/node_modules/echarts/lib/model/mixin/dataFormat.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { retrieveRawValue } from '../../data/helper/dataProvider';\nimport { formatTpl } from '../../util/format';\nimport { makePrintable } from '../../util/log';\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g;\n\nvar DataFormatMixin =\n/** @class */\nfunction () {\n  function DataFormatMixin() {}\n  /**\n   * Get params for formatter\n   */\n\n\n  DataFormatMixin.prototype.getDataParams = function (dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var style = data.getItemVisual(dataIndex, 'style');\n    var color = style && style[data.getItemVisual(dataIndex, 'drawType') || 'fill'];\n    var borderColor = style && style.stroke;\n    var mainType = this.mainType;\n    var isSeries = mainType === 'series';\n    var userOutput = data.userOutput;\n    return {\n      componentType: mainType,\n      componentSubType: this.subType,\n      componentIndex: this.componentIndex,\n      seriesType: isSeries ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: isSeries ? this.id : null,\n      seriesName: isSeries ? this.name : null,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      borderColor: borderColor,\n      dimensionNames: userOutput ? userOutput.dimensionNames : null,\n      encode: userOutput ? userOutput.encode : null,\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  };\n  /**\n   * Format label\n   * @param dataIndex\n   * @param status 'normal' by default\n   * @param dataType\n   * @param labelDimIndex Only used in some chart that\n   *        use formatter in different dimensions, like radar.\n   * @param formatter Formatter given outside.\n   * @return return null/undefined if no formatter\n   */\n\n\n  DataFormatMixin.prototype.getFormattedLabel = function (dataIndex, status, dataType, labelDimIndex, formatter, extendParams) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var params = this.getDataParams(dataIndex, dataType);\n\n    if (extendParams) {\n      params.value = extendParams.interpolatedValue;\n    }\n\n    if (labelDimIndex != null && zrUtil.isArray(params.value)) {\n      params.value = params.value[labelDimIndex];\n    }\n\n    if (!formatter) {\n      var itemModel = data.getItemModel(dataIndex); // @ts-ignore\n\n      formatter = itemModel.get(status === 'normal' ? ['label', 'formatter'] : [status, 'label', 'formatter']);\n    }\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      params.dimensionIndex = labelDimIndex;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dimStr) {\n        var len = dimStr.length;\n        var dimLoose = dimStr.charAt(0) === '[' && dimStr.charAt(len - 1) === ']' ? +dimStr.slice(1, len - 1) // Also support: '[]' => 0\n        : dimStr;\n        var val = retrieveRawValue(data, dataIndex, dimLoose);\n\n        if (extendParams && zrUtil.isArray(extendParams.interpolatedValue)) {\n          var dimInfo = data.getDimensionInfo(dimLoose);\n\n          if (dimInfo) {\n            val = extendParams.interpolatedValue[dimInfo.index];\n          }\n        }\n\n        return val != null ? val + '' : '';\n      });\n    }\n  };\n  /**\n   * Get raw value in option\n   */\n\n\n  DataFormatMixin.prototype.getRawValue = function (idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  };\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {string} [dataType]\n   */\n\n\n  DataFormatMixin.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    // Empty function\n    return;\n  };\n\n  return DataFormatMixin;\n}();\n\nexport { DataFormatMixin };\n; // PENDING: previously we accept this type when calling `formatTooltip`,\n// but guess little chance has been used outside. Do we need to backward\n// compat it?\n// type TooltipFormatResultLegacyObject = {\n//     // `html` means the markup language text, either in 'html' or 'richText'.\n//     // The name `html` is not appropriate becuase in 'richText' it is not a HTML\n//     // string. But still support it for backward compat.\n//     html: string;\n//     markers: Dictionary<ColorString>;\n// };\n\n/**\n * For backward compat, normalize the return from `formatTooltip`.\n */\n\nexport function normalizeTooltipFormatResult(result // markersExisting: Dictionary<ColorString>\n) {\n  var markupText; // let markers: Dictionary<ColorString>;\n\n  var markupFragment;\n\n  if (zrUtil.isObject(result)) {\n    if (result.type) {\n      markupFragment = result;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('The return type of `formatTooltip` is not supported: ' + makePrintable(result));\n      }\n    } // else {\n    //     markupText = (result as TooltipFormatResultLegacyObject).html;\n    //     markers = (result as TooltipFormatResultLegacyObject).markers;\n    //     if (markersExisting) {\n    //         markers = zrUtil.merge(markersExisting, markers);\n    //     }\n    // }\n\n  } else {\n    markupText = result;\n  }\n\n  return {\n    markupText: markupText,\n    // markers: markers || markersExisting,\n    markupFragment: markupFragment\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}