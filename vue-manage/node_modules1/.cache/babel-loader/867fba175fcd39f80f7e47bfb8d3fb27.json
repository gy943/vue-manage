{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { parse, stringify } from 'zrender/lib/tool/color';\nimport * as graphic from '../../util/graphic';\nimport { enableHoverEmphasis } from '../../util/states';\nimport { setLabelStyle, createTextStyle } from '../../label/labelStyle';\nimport { makeBackground } from '../helper/listComponent';\nimport * as layoutUtil from '../../util/layout';\nimport ComponentView from '../../view/Component';\nimport { LINE_STYLE_KEY_MAP } from '../../model/mixin/lineStyle';\nimport { ITEM_STYLE_KEY_MAP } from '../../model/mixin/itemStyle';\nimport { createSymbol } from '../../util/symbol';\nvar curry = zrUtil.curry;\nvar each = zrUtil.each;\nvar Group = graphic.Group;\n\nvar LegendView =\n/** @class */\nfunction (_super) {\n  __extends(LegendView, _super);\n\n  function LegendView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = LegendView.type;\n    _this.newlineDisabled = false;\n    return _this;\n  }\n\n  LegendView.prototype.init = function () {\n    this.group.add(this._contentGroup = new Group());\n    this.group.add(this._selectorGroup = new Group());\n    this._isFirstRender = true;\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.getContentGroup = function () {\n    return this._contentGroup;\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.getSelectorGroup = function () {\n    return this._selectorGroup;\n  };\n  /**\n   * @override\n   */\n\n\n  LegendView.prototype.render = function (legendModel, ecModel, api) {\n    var isFirstRender = this._isFirstRender;\n    this._isFirstRender = false;\n    this.resetInner();\n\n    if (!legendModel.get('show', true)) {\n      return;\n    }\n\n    var itemAlign = legendModel.get('align');\n    var orient = legendModel.get('orient');\n\n    if (!itemAlign || itemAlign === 'auto') {\n      itemAlign = legendModel.get('left') === 'right' && orient === 'vertical' ? 'right' : 'left';\n    } // selector has been normalized to an array in model\n\n\n    var selector = legendModel.get('selector', true);\n    var selectorPosition = legendModel.get('selectorPosition', true);\n\n    if (selector && (!selectorPosition || selectorPosition === 'auto')) {\n      selectorPosition = orient === 'horizontal' ? 'end' : 'start';\n    }\n\n    this.renderInner(itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition); // Perform layout.\n\n    var positionInfo = legendModel.getBoxLayoutParams();\n    var viewportSize = {\n      width: api.getWidth(),\n      height: api.getHeight()\n    };\n    var padding = legendModel.get('padding');\n    var maxSize = layoutUtil.getLayoutRect(positionInfo, viewportSize, padding);\n    var mainRect = this.layoutInner(legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition); // Place mainGroup, based on the calculated `mainRect`.\n\n    var layoutRect = layoutUtil.getLayoutRect(zrUtil.defaults({\n      width: mainRect.width,\n      height: mainRect.height\n    }, positionInfo), viewportSize, padding);\n    this.group.x = layoutRect.x - mainRect.x;\n    this.group.y = layoutRect.y - mainRect.y;\n    this.group.markRedraw(); // Render background after group is layout.\n\n    this.group.add(this._backgroundEl = makeBackground(mainRect, legendModel));\n  };\n\n  LegendView.prototype.resetInner = function () {\n    this.getContentGroup().removeAll();\n    this._backgroundEl && this.group.remove(this._backgroundEl);\n    this.getSelectorGroup().removeAll();\n  };\n\n  LegendView.prototype.renderInner = function (itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition) {\n    var contentGroup = this.getContentGroup();\n    var legendDrawnMap = zrUtil.createHashMap();\n    var selectMode = legendModel.get('selectedMode');\n    var excludeSeriesId = [];\n    ecModel.eachRawSeries(function (seriesModel) {\n      !seriesModel.get('legendHoverLink') && excludeSeriesId.push(seriesModel.id);\n    });\n    each(legendModel.getData(), function (legendItemModel, dataIndex) {\n      var name = legendItemModel.get('name'); // Use empty string or \\n as a newline string\n\n      if (!this.newlineDisabled && (name === '' || name === '\\n')) {\n        var g = new Group(); // @ts-ignore\n\n        g.newline = true;\n        contentGroup.add(g);\n        return;\n      } // Representitive series.\n\n\n      var seriesModel = ecModel.getSeriesByName(name)[0];\n\n      if (legendDrawnMap.get(name)) {\n        // Have been drawed\n        return;\n      } // Legend to control series.\n\n\n      if (seriesModel) {\n        var data = seriesModel.getData();\n        var lineVisualStyle = data.getVisual('legendLineStyle') || {};\n        var legendIcon = data.getVisual('legendIcon');\n        /**\n         * `data.getVisual('style')` may be the color from the register\n         * in series. For example, for line series,\n         */\n\n        var style = data.getVisual('style');\n\n        var itemGroup = this._createItem(seriesModel, name, dataIndex, legendItemModel, legendModel, itemAlign, lineVisualStyle, style, legendIcon, selectMode);\n\n        itemGroup.on('click', curry(dispatchSelectAction, name, null, api, excludeSeriesId)).on('mouseover', curry(dispatchHighlightAction, seriesModel.name, null, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, seriesModel.name, null, api, excludeSeriesId));\n        legendDrawnMap.set(name, true);\n      } else {\n        // Legend to control data. In pie and funnel.\n        ecModel.eachRawSeries(function (seriesModel) {\n          // In case multiple series has same data name\n          if (legendDrawnMap.get(name)) {\n            return;\n          }\n\n          if (seriesModel.legendVisualProvider) {\n            var provider = seriesModel.legendVisualProvider;\n\n            if (!provider.containName(name)) {\n              return;\n            }\n\n            var idx = provider.indexOfName(name);\n            var style = provider.getItemVisual(idx, 'style');\n            var legendIcon = provider.getItemVisual(idx, 'legendIcon');\n            var colorArr = parse(style.fill); // Color may be set to transparent in visualMap when data is out of range.\n            // Do not show nothing.\n\n            if (colorArr && colorArr[3] === 0) {\n              colorArr[3] = 0.2; // TODO color is set to 0, 0, 0, 0. Should show correct RGBA\n\n              style.fill = stringify(colorArr, 'rgba');\n            }\n\n            var itemGroup = this._createItem(seriesModel, name, dataIndex, legendItemModel, legendModel, itemAlign, {}, style, legendIcon, selectMode); // FIXME: consider different series has items with the same name.\n\n\n            itemGroup.on('click', curry(dispatchSelectAction, null, name, api, excludeSeriesId)) // Should not specify the series name, consider legend controls\n            // more than one pie series.\n            .on('mouseover', curry(dispatchHighlightAction, null, name, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, null, name, api, excludeSeriesId));\n            legendDrawnMap.set(name, true);\n          }\n        }, this);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!legendDrawnMap.get(name)) {\n          console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\n        }\n      }\n    }, this);\n\n    if (selector) {\n      this._createSelector(selector, legendModel, api, orient, selectorPosition);\n    }\n  };\n\n  LegendView.prototype._createSelector = function (selector, legendModel, api, orient, selectorPosition) {\n    var selectorGroup = this.getSelectorGroup();\n    each(selector, function createSelectorButton(selectorItem) {\n      var type = selectorItem.type;\n      var labelText = new graphic.Text({\n        style: {\n          x: 0,\n          y: 0,\n          align: 'center',\n          verticalAlign: 'middle'\n        },\n        onclick: function () {\n          api.dispatchAction({\n            type: type === 'all' ? 'legendAllSelect' : 'legendInverseSelect'\n          });\n        }\n      });\n      selectorGroup.add(labelText);\n      var labelModel = legendModel.getModel('selectorLabel');\n      var emphasisLabelModel = legendModel.getModel(['emphasis', 'selectorLabel']);\n      setLabelStyle(labelText, {\n        normal: labelModel,\n        emphasis: emphasisLabelModel\n      }, {\n        defaultText: selectorItem.title\n      });\n      enableHoverEmphasis(labelText);\n    });\n  };\n\n  LegendView.prototype._createItem = function (seriesModel, name, dataIndex, legendItemModel, legendModel, itemAlign, lineVisualStyle, itemVisualStyle, legendIcon, selectMode) {\n    var drawType = seriesModel.visualDrawType;\n    var itemWidth = legendModel.get('itemWidth');\n    var itemHeight = legendModel.get('itemHeight');\n    var isSelected = legendModel.isSelected(name);\n    var iconRotate = legendItemModel.get('symbolRotate');\n    var legendIconType = legendItemModel.get('icon');\n    legendIcon = legendIconType || legendIcon || 'roundRect';\n    var legendLineStyle = legendModel.getModel('lineStyle');\n    var style = getLegendStyle(legendIcon, legendItemModel, legendLineStyle, lineVisualStyle, itemVisualStyle, drawType, isSelected);\n    var itemGroup = new Group();\n    var textStyleModel = legendItemModel.getModel('textStyle');\n\n    if (typeof seriesModel.getLegendIcon === 'function' && (!legendIconType || legendIconType === 'inherit')) {\n      // Series has specific way to define legend icon\n      itemGroup.add(seriesModel.getLegendIcon({\n        itemWidth: itemWidth,\n        itemHeight: itemHeight,\n        icon: legendIcon,\n        iconRotate: iconRotate,\n        itemStyle: style.itemStyle,\n        lineStyle: style.lineStyle\n      }));\n    } else {\n      // Use default legend icon policy for most series\n      var rotate = legendIconType === 'inherit' && seriesModel.getData().getVisual('symbol') ? iconRotate === 'inherit' ? seriesModel.getData().getVisual('symbolRotate') : iconRotate : 0; // No rotation for no icon\n\n      itemGroup.add(getDefaultLegendIcon({\n        itemWidth: itemWidth,\n        itemHeight: itemHeight,\n        icon: legendIcon,\n        iconRotate: rotate,\n        itemStyle: style.itemStyle,\n        lineStyle: style.lineStyle\n      }));\n    }\n\n    var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\n    var textAlign = itemAlign;\n    var formatter = legendModel.get('formatter');\n    var content = name;\n\n    if (typeof formatter === 'string' && formatter) {\n      content = formatter.replace('{name}', name != null ? name : '');\n    } else if (typeof formatter === 'function') {\n      content = formatter(name);\n    }\n\n    var inactiveColor = legendItemModel.get('inactiveColor');\n    itemGroup.add(new graphic.Text({\n      style: createTextStyle(textStyleModel, {\n        text: content,\n        x: textX,\n        y: itemHeight / 2,\n        fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\n        align: textAlign,\n        verticalAlign: 'middle'\n      })\n    })); // Add a invisible rect to increase the area of mouse hover\n\n    var hitRect = new graphic.Rect({\n      shape: itemGroup.getBoundingRect(),\n      invisible: true\n    });\n    var tooltipModel = legendItemModel.getModel('tooltip');\n\n    if (tooltipModel.get('show')) {\n      graphic.setTooltipConfig({\n        el: hitRect,\n        componentModel: legendModel,\n        itemName: name,\n        itemTooltipOption: tooltipModel.option\n      });\n    }\n\n    itemGroup.add(hitRect);\n    itemGroup.eachChild(function (child) {\n      child.silent = true;\n    });\n    hitRect.silent = !selectMode;\n    this.getContentGroup().add(itemGroup);\n    enableHoverEmphasis(itemGroup); // @ts-ignore\n\n    itemGroup.__legendDataIndex = dataIndex;\n    return itemGroup;\n  };\n\n  LegendView.prototype.layoutInner = function (legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition) {\n    var contentGroup = this.getContentGroup();\n    var selectorGroup = this.getSelectorGroup(); // Place items in contentGroup.\n\n    layoutUtil.box(legendModel.get('orient'), contentGroup, legendModel.get('itemGap'), maxSize.width, maxSize.height);\n    var contentRect = contentGroup.getBoundingRect();\n    var contentPos = [-contentRect.x, -contentRect.y];\n    selectorGroup.markRedraw();\n    contentGroup.markRedraw();\n\n    if (selector) {\n      // Place buttons in selectorGroup\n      layoutUtil.box( // Buttons in selectorGroup always layout horizontally\n      'horizontal', selectorGroup, legendModel.get('selectorItemGap', true));\n      var selectorRect = selectorGroup.getBoundingRect();\n      var selectorPos = [-selectorRect.x, -selectorRect.y];\n      var selectorButtonGap = legendModel.get('selectorButtonGap', true);\n      var orientIdx = legendModel.getOrient().index;\n      var wh = orientIdx === 0 ? 'width' : 'height';\n      var hw = orientIdx === 0 ? 'height' : 'width';\n      var yx = orientIdx === 0 ? 'y' : 'x';\n\n      if (selectorPosition === 'end') {\n        selectorPos[orientIdx] += contentRect[wh] + selectorButtonGap;\n      } else {\n        contentPos[orientIdx] += selectorRect[wh] + selectorButtonGap;\n      } //Always align selector to content as 'middle'\n\n\n      selectorPos[1 - orientIdx] += contentRect[hw] / 2 - selectorRect[hw] / 2;\n      selectorGroup.x = selectorPos[0];\n      selectorGroup.y = selectorPos[1];\n      contentGroup.x = contentPos[0];\n      contentGroup.y = contentPos[1];\n      var mainRect = {\n        x: 0,\n        y: 0\n      };\n      mainRect[wh] = contentRect[wh] + selectorButtonGap + selectorRect[wh];\n      mainRect[hw] = Math.max(contentRect[hw], selectorRect[hw]);\n      mainRect[yx] = Math.min(0, selectorRect[yx] + selectorPos[1 - orientIdx]);\n      return mainRect;\n    } else {\n      contentGroup.x = contentPos[0];\n      contentGroup.y = contentPos[1];\n      return this.group.getBoundingRect();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.remove = function () {\n    this.getContentGroup().removeAll();\n    this._isFirstRender = true;\n  };\n\n  LegendView.type = 'legend.plain';\n  return LegendView;\n}(ComponentView);\n\nfunction getLegendStyle(iconType, legendModel, legendLineStyle, lineVisualStyle, itemVisualStyle, drawType, isSelected) {\n  /**\n   * Use series style if is inherit;\n   * elsewise, use legend style\n   */\n  // itemStyle\n  var legendItemModel = legendModel.getModel('itemStyle');\n  var itemProperties = ITEM_STYLE_KEY_MAP.concat([['decal']]);\n  var itemStyle = {};\n\n  for (var i = 0; i < itemProperties.length; ++i) {\n    var propName = itemProperties[i][itemProperties[i].length - 1];\n    var visualName = itemProperties[i][0];\n    var value = legendItemModel.getShallow(propName);\n\n    if (value === 'inherit') {\n      switch (visualName) {\n        case 'fill':\n          /**\n           * Series with visualDrawType as 'stroke' should have\n           * series stroke as legend fill\n           */\n          itemStyle.fill = itemVisualStyle[drawType];\n          break;\n\n        case 'stroke':\n          /**\n           * icon type with \"emptyXXX\" should use fill color\n           * in visual style\n           */\n          itemStyle.stroke = itemVisualStyle[iconType.lastIndexOf('empty', 0) === 0 ? 'fill' : 'stroke'];\n          break;\n\n        case 'opacity':\n          /**\n           * Use lineStyle.opacity if drawType is stroke\n           */\n          itemStyle.opacity = (drawType === 'fill' ? itemVisualStyle : lineVisualStyle).opacity;\n          break;\n\n        default:\n          itemStyle[visualName] = itemVisualStyle[visualName];\n      }\n    } else if (value === 'auto' && visualName === 'lineWidth') {\n      // If lineStyle.width is 'auto', it is set to be 2 if series has border\n      itemStyle.lineWidth = itemVisualStyle.lineWidth > 0 ? 2 : 0;\n    } else {\n      itemStyle[visualName] = value;\n    }\n  } // lineStyle\n\n\n  var legendLineModel = legendModel.getModel('lineStyle');\n  var lineProperties = LINE_STYLE_KEY_MAP.concat([['inactiveColor'], ['inactiveWidth']]);\n  var lineStyle = {};\n\n  for (var i = 0; i < lineProperties.length; ++i) {\n    var propName = lineProperties[i][1];\n    var visualName = lineProperties[i][0];\n    var value = legendLineModel.getShallow(propName);\n\n    if (value === 'inherit') {\n      lineStyle[visualName] = lineVisualStyle[visualName];\n    } else if (value === 'auto' && visualName === 'lineWidth') {\n      // If lineStyle.width is 'auto', it is set to be 2 if series has border\n      lineStyle.lineWidth = lineVisualStyle.lineWidth > 0 ? 2 : 0;\n    } else {\n      lineStyle[visualName] = value;\n    }\n  } // Fix auto color to real color\n\n\n  itemStyle.fill === 'auto' && (itemStyle.fill = itemVisualStyle.fill);\n  itemStyle.stroke === 'auto' && (itemStyle.stroke = itemVisualStyle.fill);\n  lineStyle.stroke === 'auto' && (lineStyle.stroke = itemVisualStyle.fill);\n\n  if (!isSelected) {\n    var borderWidth = legendModel.get('inactiveBorderWidth');\n    /**\n     * Since stroke is set to be inactiveBorderColor, it may occur that\n     * there is no border in series but border in legend, so we need to\n     * use border only when series has border if is set to be auto\n     */\n\n    var visualHasBorder = itemStyle[iconType.indexOf('empty') > -1 ? 'fill' : 'stroke'];\n    itemStyle.lineWidth = borderWidth === 'auto' ? itemVisualStyle.lineWidth > 0 && visualHasBorder ? 2 : 0 : itemStyle.lineWidth;\n    itemStyle.fill = legendModel.get('inactiveColor');\n    itemStyle.stroke = legendModel.get('inactiveBorderColor');\n    lineStyle.stroke = legendLineStyle.get('inactiveColor');\n    lineStyle.lineWidth = legendLineStyle.get('inactiveWidth');\n  }\n\n  return {\n    itemStyle: itemStyle,\n    lineStyle: lineStyle\n  };\n}\n\nfunction getDefaultLegendIcon(opt) {\n  var symboType = opt.icon || 'roundRect';\n  var icon = createSymbol(symboType, 0, 0, opt.itemWidth, opt.itemHeight, opt.itemStyle.fill);\n  icon.setStyle(opt.itemStyle);\n  icon.rotation = (opt.iconRotate || 0) * Math.PI / 180;\n  icon.setOrigin([opt.itemWidth / 2, opt.itemHeight / 2]);\n\n  if (symboType.indexOf('empty') > -1) {\n    icon.style.stroke = icon.style.fill;\n    icon.style.fill = '#fff';\n    icon.style.lineWidth = 2;\n  }\n\n  return icon;\n}\n\nfunction dispatchSelectAction(seriesName, dataName, api, excludeSeriesId) {\n  // downplay before unselect\n  dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId);\n  api.dispatchAction({\n    type: 'legendToggleSelect',\n    name: seriesName != null ? seriesName : dataName\n  }); // highlight after select\n  // TODO higlight immediately may cause animation loss.\n\n  dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId);\n}\n\nfunction isUseHoverLayer(api) {\n  var list = api.getZr().storage.getDisplayList();\n  var emphasisState;\n  var i = 0;\n  var len = list.length;\n\n  while (i < len && !(emphasisState = list[i].states.emphasis)) {\n    i++;\n  }\n\n  return emphasisState && emphasisState.hoverLayer;\n}\n\nfunction dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId) {\n  // If element hover will move to a hoverLayer.\n  if (!isUseHoverLayer(api)) {\n    api.dispatchAction({\n      type: 'highlight',\n      seriesName: seriesName,\n      name: dataName,\n      excludeSeriesId: excludeSeriesId\n    });\n  }\n}\n\nfunction dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId) {\n  // If element hover will move to a hoverLayer.\n  if (!isUseHoverLayer(api)) {\n    api.dispatchAction({\n      type: 'downplay',\n      seriesName: seriesName,\n      name: dataName,\n      excludeSeriesId: excludeSeriesId\n    });\n  }\n}\n\nexport default LegendView;","map":{"version":3,"names":["__extends","zrUtil","parse","stringify","graphic","enableHoverEmphasis","setLabelStyle","createTextStyle","makeBackground","layoutUtil","ComponentView","LINE_STYLE_KEY_MAP","ITEM_STYLE_KEY_MAP","createSymbol","curry","each","Group","LegendView","_super","_this","apply","arguments","type","newlineDisabled","prototype","init","group","add","_contentGroup","_selectorGroup","_isFirstRender","getContentGroup","getSelectorGroup","render","legendModel","ecModel","api","isFirstRender","resetInner","get","itemAlign","orient","selector","selectorPosition","renderInner","positionInfo","getBoxLayoutParams","viewportSize","width","getWidth","height","getHeight","padding","maxSize","getLayoutRect","mainRect","layoutInner","layoutRect","defaults","x","y","markRedraw","_backgroundEl","removeAll","remove","contentGroup","legendDrawnMap","createHashMap","selectMode","excludeSeriesId","eachRawSeries","seriesModel","push","id","getData","legendItemModel","dataIndex","name","g","newline","getSeriesByName","data","lineVisualStyle","getVisual","legendIcon","style","itemGroup","_createItem","on","dispatchSelectAction","dispatchHighlightAction","dispatchDownplayAction","set","legendVisualProvider","provider","containName","idx","indexOfName","getItemVisual","colorArr","fill","process","env","NODE_ENV","console","warn","_createSelector","selectorGroup","createSelectorButton","selectorItem","labelText","Text","align","verticalAlign","onclick","dispatchAction","labelModel","getModel","emphasisLabelModel","normal","emphasis","defaultText","title","itemVisualStyle","drawType","visualDrawType","itemWidth","itemHeight","isSelected","iconRotate","legendIconType","legendLineStyle","getLegendStyle","textStyleModel","getLegendIcon","icon","itemStyle","lineStyle","rotate","getDefaultLegendIcon","textX","textAlign","formatter","content","replace","inactiveColor","text","getTextColor","hitRect","Rect","shape","getBoundingRect","invisible","tooltipModel","setTooltipConfig","el","componentModel","itemName","itemTooltipOption","option","eachChild","child","silent","__legendDataIndex","box","contentRect","contentPos","selectorRect","selectorPos","selectorButtonGap","orientIdx","getOrient","index","wh","hw","yx","Math","max","min","iconType","itemProperties","concat","i","length","propName","visualName","value","getShallow","stroke","lastIndexOf","opacity","lineWidth","legendLineModel","lineProperties","borderWidth","visualHasBorder","indexOf","opt","symboType","setStyle","rotation","PI","setOrigin","seriesName","dataName","isUseHoverLayer","list","getZr","storage","getDisplayList","emphasisState","len","states","hoverLayer"],"sources":["E:/school/qianduan/web/vue-manage/node_modules/echarts/lib/component/legend/LegendView.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { parse, stringify } from 'zrender/lib/tool/color';\nimport * as graphic from '../../util/graphic';\nimport { enableHoverEmphasis } from '../../util/states';\nimport { setLabelStyle, createTextStyle } from '../../label/labelStyle';\nimport { makeBackground } from '../helper/listComponent';\nimport * as layoutUtil from '../../util/layout';\nimport ComponentView from '../../view/Component';\nimport { LINE_STYLE_KEY_MAP } from '../../model/mixin/lineStyle';\nimport { ITEM_STYLE_KEY_MAP } from '../../model/mixin/itemStyle';\nimport { createSymbol } from '../../util/symbol';\nvar curry = zrUtil.curry;\nvar each = zrUtil.each;\nvar Group = graphic.Group;\n\nvar LegendView =\n/** @class */\nfunction (_super) {\n  __extends(LegendView, _super);\n\n  function LegendView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = LegendView.type;\n    _this.newlineDisabled = false;\n    return _this;\n  }\n\n  LegendView.prototype.init = function () {\n    this.group.add(this._contentGroup = new Group());\n    this.group.add(this._selectorGroup = new Group());\n    this._isFirstRender = true;\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.getContentGroup = function () {\n    return this._contentGroup;\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.getSelectorGroup = function () {\n    return this._selectorGroup;\n  };\n  /**\n   * @override\n   */\n\n\n  LegendView.prototype.render = function (legendModel, ecModel, api) {\n    var isFirstRender = this._isFirstRender;\n    this._isFirstRender = false;\n    this.resetInner();\n\n    if (!legendModel.get('show', true)) {\n      return;\n    }\n\n    var itemAlign = legendModel.get('align');\n    var orient = legendModel.get('orient');\n\n    if (!itemAlign || itemAlign === 'auto') {\n      itemAlign = legendModel.get('left') === 'right' && orient === 'vertical' ? 'right' : 'left';\n    } // selector has been normalized to an array in model\n\n\n    var selector = legendModel.get('selector', true);\n    var selectorPosition = legendModel.get('selectorPosition', true);\n\n    if (selector && (!selectorPosition || selectorPosition === 'auto')) {\n      selectorPosition = orient === 'horizontal' ? 'end' : 'start';\n    }\n\n    this.renderInner(itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition); // Perform layout.\n\n    var positionInfo = legendModel.getBoxLayoutParams();\n    var viewportSize = {\n      width: api.getWidth(),\n      height: api.getHeight()\n    };\n    var padding = legendModel.get('padding');\n    var maxSize = layoutUtil.getLayoutRect(positionInfo, viewportSize, padding);\n    var mainRect = this.layoutInner(legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition); // Place mainGroup, based on the calculated `mainRect`.\n\n    var layoutRect = layoutUtil.getLayoutRect(zrUtil.defaults({\n      width: mainRect.width,\n      height: mainRect.height\n    }, positionInfo), viewportSize, padding);\n    this.group.x = layoutRect.x - mainRect.x;\n    this.group.y = layoutRect.y - mainRect.y;\n    this.group.markRedraw(); // Render background after group is layout.\n\n    this.group.add(this._backgroundEl = makeBackground(mainRect, legendModel));\n  };\n\n  LegendView.prototype.resetInner = function () {\n    this.getContentGroup().removeAll();\n    this._backgroundEl && this.group.remove(this._backgroundEl);\n    this.getSelectorGroup().removeAll();\n  };\n\n  LegendView.prototype.renderInner = function (itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition) {\n    var contentGroup = this.getContentGroup();\n    var legendDrawnMap = zrUtil.createHashMap();\n    var selectMode = legendModel.get('selectedMode');\n    var excludeSeriesId = [];\n    ecModel.eachRawSeries(function (seriesModel) {\n      !seriesModel.get('legendHoverLink') && excludeSeriesId.push(seriesModel.id);\n    });\n    each(legendModel.getData(), function (legendItemModel, dataIndex) {\n      var name = legendItemModel.get('name'); // Use empty string or \\n as a newline string\n\n      if (!this.newlineDisabled && (name === '' || name === '\\n')) {\n        var g = new Group(); // @ts-ignore\n\n        g.newline = true;\n        contentGroup.add(g);\n        return;\n      } // Representitive series.\n\n\n      var seriesModel = ecModel.getSeriesByName(name)[0];\n\n      if (legendDrawnMap.get(name)) {\n        // Have been drawed\n        return;\n      } // Legend to control series.\n\n\n      if (seriesModel) {\n        var data = seriesModel.getData();\n        var lineVisualStyle = data.getVisual('legendLineStyle') || {};\n        var legendIcon = data.getVisual('legendIcon');\n        /**\n         * `data.getVisual('style')` may be the color from the register\n         * in series. For example, for line series,\n         */\n\n        var style = data.getVisual('style');\n\n        var itemGroup = this._createItem(seriesModel, name, dataIndex, legendItemModel, legendModel, itemAlign, lineVisualStyle, style, legendIcon, selectMode);\n\n        itemGroup.on('click', curry(dispatchSelectAction, name, null, api, excludeSeriesId)).on('mouseover', curry(dispatchHighlightAction, seriesModel.name, null, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, seriesModel.name, null, api, excludeSeriesId));\n        legendDrawnMap.set(name, true);\n      } else {\n        // Legend to control data. In pie and funnel.\n        ecModel.eachRawSeries(function (seriesModel) {\n          // In case multiple series has same data name\n          if (legendDrawnMap.get(name)) {\n            return;\n          }\n\n          if (seriesModel.legendVisualProvider) {\n            var provider = seriesModel.legendVisualProvider;\n\n            if (!provider.containName(name)) {\n              return;\n            }\n\n            var idx = provider.indexOfName(name);\n            var style = provider.getItemVisual(idx, 'style');\n            var legendIcon = provider.getItemVisual(idx, 'legendIcon');\n            var colorArr = parse(style.fill); // Color may be set to transparent in visualMap when data is out of range.\n            // Do not show nothing.\n\n            if (colorArr && colorArr[3] === 0) {\n              colorArr[3] = 0.2; // TODO color is set to 0, 0, 0, 0. Should show correct RGBA\n\n              style.fill = stringify(colorArr, 'rgba');\n            }\n\n            var itemGroup = this._createItem(seriesModel, name, dataIndex, legendItemModel, legendModel, itemAlign, {}, style, legendIcon, selectMode); // FIXME: consider different series has items with the same name.\n\n\n            itemGroup.on('click', curry(dispatchSelectAction, null, name, api, excludeSeriesId)) // Should not specify the series name, consider legend controls\n            // more than one pie series.\n            .on('mouseover', curry(dispatchHighlightAction, null, name, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, null, name, api, excludeSeriesId));\n            legendDrawnMap.set(name, true);\n          }\n        }, this);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!legendDrawnMap.get(name)) {\n          console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\n        }\n      }\n    }, this);\n\n    if (selector) {\n      this._createSelector(selector, legendModel, api, orient, selectorPosition);\n    }\n  };\n\n  LegendView.prototype._createSelector = function (selector, legendModel, api, orient, selectorPosition) {\n    var selectorGroup = this.getSelectorGroup();\n    each(selector, function createSelectorButton(selectorItem) {\n      var type = selectorItem.type;\n      var labelText = new graphic.Text({\n        style: {\n          x: 0,\n          y: 0,\n          align: 'center',\n          verticalAlign: 'middle'\n        },\n        onclick: function () {\n          api.dispatchAction({\n            type: type === 'all' ? 'legendAllSelect' : 'legendInverseSelect'\n          });\n        }\n      });\n      selectorGroup.add(labelText);\n      var labelModel = legendModel.getModel('selectorLabel');\n      var emphasisLabelModel = legendModel.getModel(['emphasis', 'selectorLabel']);\n      setLabelStyle(labelText, {\n        normal: labelModel,\n        emphasis: emphasisLabelModel\n      }, {\n        defaultText: selectorItem.title\n      });\n      enableHoverEmphasis(labelText);\n    });\n  };\n\n  LegendView.prototype._createItem = function (seriesModel, name, dataIndex, legendItemModel, legendModel, itemAlign, lineVisualStyle, itemVisualStyle, legendIcon, selectMode) {\n    var drawType = seriesModel.visualDrawType;\n    var itemWidth = legendModel.get('itemWidth');\n    var itemHeight = legendModel.get('itemHeight');\n    var isSelected = legendModel.isSelected(name);\n    var iconRotate = legendItemModel.get('symbolRotate');\n    var legendIconType = legendItemModel.get('icon');\n    legendIcon = legendIconType || legendIcon || 'roundRect';\n    var legendLineStyle = legendModel.getModel('lineStyle');\n    var style = getLegendStyle(legendIcon, legendItemModel, legendLineStyle, lineVisualStyle, itemVisualStyle, drawType, isSelected);\n    var itemGroup = new Group();\n    var textStyleModel = legendItemModel.getModel('textStyle');\n\n    if (typeof seriesModel.getLegendIcon === 'function' && (!legendIconType || legendIconType === 'inherit')) {\n      // Series has specific way to define legend icon\n      itemGroup.add(seriesModel.getLegendIcon({\n        itemWidth: itemWidth,\n        itemHeight: itemHeight,\n        icon: legendIcon,\n        iconRotate: iconRotate,\n        itemStyle: style.itemStyle,\n        lineStyle: style.lineStyle\n      }));\n    } else {\n      // Use default legend icon policy for most series\n      var rotate = legendIconType === 'inherit' && seriesModel.getData().getVisual('symbol') ? iconRotate === 'inherit' ? seriesModel.getData().getVisual('symbolRotate') : iconRotate : 0; // No rotation for no icon\n\n      itemGroup.add(getDefaultLegendIcon({\n        itemWidth: itemWidth,\n        itemHeight: itemHeight,\n        icon: legendIcon,\n        iconRotate: rotate,\n        itemStyle: style.itemStyle,\n        lineStyle: style.lineStyle\n      }));\n    }\n\n    var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\n    var textAlign = itemAlign;\n    var formatter = legendModel.get('formatter');\n    var content = name;\n\n    if (typeof formatter === 'string' && formatter) {\n      content = formatter.replace('{name}', name != null ? name : '');\n    } else if (typeof formatter === 'function') {\n      content = formatter(name);\n    }\n\n    var inactiveColor = legendItemModel.get('inactiveColor');\n    itemGroup.add(new graphic.Text({\n      style: createTextStyle(textStyleModel, {\n        text: content,\n        x: textX,\n        y: itemHeight / 2,\n        fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\n        align: textAlign,\n        verticalAlign: 'middle'\n      })\n    })); // Add a invisible rect to increase the area of mouse hover\n\n    var hitRect = new graphic.Rect({\n      shape: itemGroup.getBoundingRect(),\n      invisible: true\n    });\n    var tooltipModel = legendItemModel.getModel('tooltip');\n\n    if (tooltipModel.get('show')) {\n      graphic.setTooltipConfig({\n        el: hitRect,\n        componentModel: legendModel,\n        itemName: name,\n        itemTooltipOption: tooltipModel.option\n      });\n    }\n\n    itemGroup.add(hitRect);\n    itemGroup.eachChild(function (child) {\n      child.silent = true;\n    });\n    hitRect.silent = !selectMode;\n    this.getContentGroup().add(itemGroup);\n    enableHoverEmphasis(itemGroup); // @ts-ignore\n\n    itemGroup.__legendDataIndex = dataIndex;\n    return itemGroup;\n  };\n\n  LegendView.prototype.layoutInner = function (legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition) {\n    var contentGroup = this.getContentGroup();\n    var selectorGroup = this.getSelectorGroup(); // Place items in contentGroup.\n\n    layoutUtil.box(legendModel.get('orient'), contentGroup, legendModel.get('itemGap'), maxSize.width, maxSize.height);\n    var contentRect = contentGroup.getBoundingRect();\n    var contentPos = [-contentRect.x, -contentRect.y];\n    selectorGroup.markRedraw();\n    contentGroup.markRedraw();\n\n    if (selector) {\n      // Place buttons in selectorGroup\n      layoutUtil.box( // Buttons in selectorGroup always layout horizontally\n      'horizontal', selectorGroup, legendModel.get('selectorItemGap', true));\n      var selectorRect = selectorGroup.getBoundingRect();\n      var selectorPos = [-selectorRect.x, -selectorRect.y];\n      var selectorButtonGap = legendModel.get('selectorButtonGap', true);\n      var orientIdx = legendModel.getOrient().index;\n      var wh = orientIdx === 0 ? 'width' : 'height';\n      var hw = orientIdx === 0 ? 'height' : 'width';\n      var yx = orientIdx === 0 ? 'y' : 'x';\n\n      if (selectorPosition === 'end') {\n        selectorPos[orientIdx] += contentRect[wh] + selectorButtonGap;\n      } else {\n        contentPos[orientIdx] += selectorRect[wh] + selectorButtonGap;\n      } //Always align selector to content as 'middle'\n\n\n      selectorPos[1 - orientIdx] += contentRect[hw] / 2 - selectorRect[hw] / 2;\n      selectorGroup.x = selectorPos[0];\n      selectorGroup.y = selectorPos[1];\n      contentGroup.x = contentPos[0];\n      contentGroup.y = contentPos[1];\n      var mainRect = {\n        x: 0,\n        y: 0\n      };\n      mainRect[wh] = contentRect[wh] + selectorButtonGap + selectorRect[wh];\n      mainRect[hw] = Math.max(contentRect[hw], selectorRect[hw]);\n      mainRect[yx] = Math.min(0, selectorRect[yx] + selectorPos[1 - orientIdx]);\n      return mainRect;\n    } else {\n      contentGroup.x = contentPos[0];\n      contentGroup.y = contentPos[1];\n      return this.group.getBoundingRect();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  LegendView.prototype.remove = function () {\n    this.getContentGroup().removeAll();\n    this._isFirstRender = true;\n  };\n\n  LegendView.type = 'legend.plain';\n  return LegendView;\n}(ComponentView);\n\nfunction getLegendStyle(iconType, legendModel, legendLineStyle, lineVisualStyle, itemVisualStyle, drawType, isSelected) {\n  /**\n   * Use series style if is inherit;\n   * elsewise, use legend style\n   */\n  // itemStyle\n  var legendItemModel = legendModel.getModel('itemStyle');\n  var itemProperties = ITEM_STYLE_KEY_MAP.concat([['decal']]);\n  var itemStyle = {};\n\n  for (var i = 0; i < itemProperties.length; ++i) {\n    var propName = itemProperties[i][itemProperties[i].length - 1];\n    var visualName = itemProperties[i][0];\n    var value = legendItemModel.getShallow(propName);\n\n    if (value === 'inherit') {\n      switch (visualName) {\n        case 'fill':\n          /**\n           * Series with visualDrawType as 'stroke' should have\n           * series stroke as legend fill\n           */\n          itemStyle.fill = itemVisualStyle[drawType];\n          break;\n\n        case 'stroke':\n          /**\n           * icon type with \"emptyXXX\" should use fill color\n           * in visual style\n           */\n          itemStyle.stroke = itemVisualStyle[iconType.lastIndexOf('empty', 0) === 0 ? 'fill' : 'stroke'];\n          break;\n\n        case 'opacity':\n          /**\n           * Use lineStyle.opacity if drawType is stroke\n           */\n          itemStyle.opacity = (drawType === 'fill' ? itemVisualStyle : lineVisualStyle).opacity;\n          break;\n\n        default:\n          itemStyle[visualName] = itemVisualStyle[visualName];\n      }\n    } else if (value === 'auto' && visualName === 'lineWidth') {\n      // If lineStyle.width is 'auto', it is set to be 2 if series has border\n      itemStyle.lineWidth = itemVisualStyle.lineWidth > 0 ? 2 : 0;\n    } else {\n      itemStyle[visualName] = value;\n    }\n  } // lineStyle\n\n\n  var legendLineModel = legendModel.getModel('lineStyle');\n  var lineProperties = LINE_STYLE_KEY_MAP.concat([['inactiveColor'], ['inactiveWidth']]);\n  var lineStyle = {};\n\n  for (var i = 0; i < lineProperties.length; ++i) {\n    var propName = lineProperties[i][1];\n    var visualName = lineProperties[i][0];\n    var value = legendLineModel.getShallow(propName);\n\n    if (value === 'inherit') {\n      lineStyle[visualName] = lineVisualStyle[visualName];\n    } else if (value === 'auto' && visualName === 'lineWidth') {\n      // If lineStyle.width is 'auto', it is set to be 2 if series has border\n      lineStyle.lineWidth = lineVisualStyle.lineWidth > 0 ? 2 : 0;\n    } else {\n      lineStyle[visualName] = value;\n    }\n  } // Fix auto color to real color\n\n\n  itemStyle.fill === 'auto' && (itemStyle.fill = itemVisualStyle.fill);\n  itemStyle.stroke === 'auto' && (itemStyle.stroke = itemVisualStyle.fill);\n  lineStyle.stroke === 'auto' && (lineStyle.stroke = itemVisualStyle.fill);\n\n  if (!isSelected) {\n    var borderWidth = legendModel.get('inactiveBorderWidth');\n    /**\n     * Since stroke is set to be inactiveBorderColor, it may occur that\n     * there is no border in series but border in legend, so we need to\n     * use border only when series has border if is set to be auto\n     */\n\n    var visualHasBorder = itemStyle[iconType.indexOf('empty') > -1 ? 'fill' : 'stroke'];\n    itemStyle.lineWidth = borderWidth === 'auto' ? itemVisualStyle.lineWidth > 0 && visualHasBorder ? 2 : 0 : itemStyle.lineWidth;\n    itemStyle.fill = legendModel.get('inactiveColor');\n    itemStyle.stroke = legendModel.get('inactiveBorderColor');\n    lineStyle.stroke = legendLineStyle.get('inactiveColor');\n    lineStyle.lineWidth = legendLineStyle.get('inactiveWidth');\n  }\n\n  return {\n    itemStyle: itemStyle,\n    lineStyle: lineStyle\n  };\n}\n\nfunction getDefaultLegendIcon(opt) {\n  var symboType = opt.icon || 'roundRect';\n  var icon = createSymbol(symboType, 0, 0, opt.itemWidth, opt.itemHeight, opt.itemStyle.fill);\n  icon.setStyle(opt.itemStyle);\n  icon.rotation = (opt.iconRotate || 0) * Math.PI / 180;\n  icon.setOrigin([opt.itemWidth / 2, opt.itemHeight / 2]);\n\n  if (symboType.indexOf('empty') > -1) {\n    icon.style.stroke = icon.style.fill;\n    icon.style.fill = '#fff';\n    icon.style.lineWidth = 2;\n  }\n\n  return icon;\n}\n\nfunction dispatchSelectAction(seriesName, dataName, api, excludeSeriesId) {\n  // downplay before unselect\n  dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId);\n  api.dispatchAction({\n    type: 'legendToggleSelect',\n    name: seriesName != null ? seriesName : dataName\n  }); // highlight after select\n  // TODO higlight immediately may cause animation loss.\n\n  dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId);\n}\n\nfunction isUseHoverLayer(api) {\n  var list = api.getZr().storage.getDisplayList();\n  var emphasisState;\n  var i = 0;\n  var len = list.length;\n\n  while (i < len && !(emphasisState = list[i].states.emphasis)) {\n    i++;\n  }\n\n  return emphasisState && emphasisState.hoverLayer;\n}\n\nfunction dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId) {\n  // If element hover will move to a hoverLayer.\n  if (!isUseHoverLayer(api)) {\n    api.dispatchAction({\n      type: 'highlight',\n      seriesName: seriesName,\n      name: dataName,\n      excludeSeriesId: excludeSeriesId\n    });\n  }\n}\n\nfunction dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId) {\n  // If element hover will move to a hoverLayer.\n  if (!isUseHoverLayer(api)) {\n    api.dispatchAction({\n      type: 'downplay',\n      seriesName: seriesName,\n      name: dataName,\n      excludeSeriesId: excludeSeriesId\n    });\n  }\n}\n\nexport default LegendView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}