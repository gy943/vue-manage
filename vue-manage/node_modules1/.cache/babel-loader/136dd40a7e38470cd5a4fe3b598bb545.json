{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport LineDraw from '../helper/LineDraw';\nimport EffectLine from '../helper/EffectLine';\nimport Line from '../helper/Line';\nimport Polyline from '../helper/Polyline';\nimport EffectPolyline from '../helper/EffectPolyline';\nimport LargeLineDraw from '../helper/LargeLineDraw';\nimport linesLayout from './linesLayout';\nimport { createClipPath } from '../helper/createClipPathFromCoordSys';\nimport ChartView from '../../view/Chart';\n\nvar LinesView =\n/** @class */\nfunction (_super) {\n  __extends(LinesView, _super);\n\n  function LinesView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = LinesView.type;\n    return _this;\n  }\n\n  LinesView.prototype.render = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var lineDraw = this._updateLineDraw(data, seriesModel);\n\n    var zlevel = seriesModel.get('zlevel');\n    var trailLength = seriesModel.get(['effect', 'trailLength']);\n    var zr = api.getZr(); // Avoid the drag cause ghost shadow\n    // FIXME Better way ?\n    // SVG doesn't support\n\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg) {\n      zr.painter.getLayer(zlevel).clear(true);\n    } // Config layer with motion blur\n\n\n    if (this._lastZlevel != null && !isSvg) {\n      zr.configLayer(this._lastZlevel, {\n        motionBlur: false\n      });\n    }\n\n    if (this._showEffect(seriesModel) && trailLength) {\n      if (process.env.NODE_ENV !== 'production') {\n        var notInIndividual_1 = false;\n        ecModel.eachSeries(function (otherSeriesModel) {\n          if (otherSeriesModel !== seriesModel && otherSeriesModel.get('zlevel') === zlevel) {\n            notInIndividual_1 = true;\n          }\n        });\n        notInIndividual_1 && console.warn('Lines with trail effect should have an individual zlevel');\n      }\n\n      if (!isSvg) {\n        zr.configLayer(zlevel, {\n          motionBlur: true,\n          lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)\n        });\n      }\n    }\n\n    lineDraw.updateData(data);\n    var clipPath = seriesModel.get('clip', true) && createClipPath(seriesModel.coordinateSystem, false, seriesModel);\n\n    if (clipPath) {\n      this.group.setClipPath(clipPath);\n    } else {\n      this.group.removeClipPath();\n    }\n\n    this._lastZlevel = zlevel;\n    this._finished = true;\n  };\n\n  LinesView.prototype.incrementalPrepareRender = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var lineDraw = this._updateLineDraw(data, seriesModel);\n\n    lineDraw.incrementalPrepareUpdate(data);\n\n    this._clearLayer(api);\n\n    this._finished = false;\n  };\n\n  LinesView.prototype.incrementalRender = function (taskParams, seriesModel, ecModel) {\n    this._lineDraw.incrementalUpdate(taskParams, seriesModel.getData());\n\n    this._finished = taskParams.end === seriesModel.getData().count();\n  };\n\n  LinesView.prototype.updateTransform = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var pipelineContext = seriesModel.pipelineContext;\n\n    if (!this._finished || pipelineContext.large || pipelineContext.progressiveRender) {\n      // TODO Don't have to do update in large mode. Only do it when there are millions of data.\n      return {\n        update: true\n      };\n    } else {\n      // TODO Use same logic with ScatterView.\n      // Manually update layout\n      var res = linesLayout.reset(seriesModel, ecModel, api);\n\n      if (res.progress) {\n        res.progress({\n          start: 0,\n          end: data.count(),\n          count: data.count()\n        }, data);\n      } // Not in large mode\n\n\n      this._lineDraw.updateLayout();\n\n      this._clearLayer(api);\n    }\n  };\n\n  LinesView.prototype._updateLineDraw = function (data, seriesModel) {\n    var lineDraw = this._lineDraw;\n\n    var hasEffect = this._showEffect(seriesModel);\n\n    var isPolyline = !!seriesModel.get('polyline');\n    var pipelineContext = seriesModel.pipelineContext;\n    var isLargeDraw = pipelineContext.large;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (hasEffect && isLargeDraw) {\n        console.warn('Large lines not support effect');\n      }\n    }\n\n    if (!lineDraw || hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLargeDraw !== this._isLargeDraw) {\n      if (lineDraw) {\n        lineDraw.remove();\n      }\n\n      lineDraw = this._lineDraw = isLargeDraw ? new LargeLineDraw() : new LineDraw(isPolyline ? hasEffect ? EffectPolyline : Polyline : hasEffect ? EffectLine : Line);\n      this._hasEffet = hasEffect;\n      this._isPolyline = isPolyline;\n      this._isLargeDraw = isLargeDraw;\n      this.group.removeAll();\n    }\n\n    this.group.add(lineDraw.group);\n    return lineDraw;\n  };\n\n  LinesView.prototype._showEffect = function (seriesModel) {\n    return !!seriesModel.get(['effect', 'show']);\n  };\n\n  LinesView.prototype._clearLayer = function (api) {\n    // Not use motion when dragging or zooming\n    var zr = api.getZr();\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg && this._lastZlevel != null) {\n      zr.painter.getLayer(this._lastZlevel).clear(true);\n    }\n  };\n\n  LinesView.prototype.remove = function (ecModel, api) {\n    this._lineDraw && this._lineDraw.remove();\n    this._lineDraw = null; // Clear motion when lineDraw is removed\n\n    this._clearLayer(api);\n  };\n\n  LinesView.type = 'lines';\n  return LinesView;\n}(ChartView);\n\nexport default LinesView;","map":{"version":3,"names":["__extends","LineDraw","EffectLine","Line","Polyline","EffectPolyline","LargeLineDraw","linesLayout","createClipPath","ChartView","LinesView","_super","_this","apply","arguments","type","prototype","render","seriesModel","ecModel","api","data","getData","lineDraw","_updateLineDraw","zlevel","get","trailLength","zr","getZr","isSvg","painter","getType","getLayer","clear","_lastZlevel","configLayer","motionBlur","_showEffect","process","env","NODE_ENV","notInIndividual_1","eachSeries","otherSeriesModel","console","warn","lastFrameAlpha","Math","max","min","updateData","clipPath","coordinateSystem","group","setClipPath","removeClipPath","_finished","incrementalPrepareRender","incrementalPrepareUpdate","_clearLayer","incrementalRender","taskParams","_lineDraw","incrementalUpdate","end","count","updateTransform","pipelineContext","large","progressiveRender","update","res","reset","progress","start","updateLayout","hasEffect","isPolyline","isLargeDraw","_hasEffet","_isPolyline","_isLargeDraw","remove","removeAll","add"],"sources":["E:/school/qianduan/web/vue-manage/node_modules/echarts/lib/chart/lines/LinesView.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport LineDraw from '../helper/LineDraw';\nimport EffectLine from '../helper/EffectLine';\nimport Line from '../helper/Line';\nimport Polyline from '../helper/Polyline';\nimport EffectPolyline from '../helper/EffectPolyline';\nimport LargeLineDraw from '../helper/LargeLineDraw';\nimport linesLayout from './linesLayout';\nimport { createClipPath } from '../helper/createClipPathFromCoordSys';\nimport ChartView from '../../view/Chart';\n\nvar LinesView =\n/** @class */\nfunction (_super) {\n  __extends(LinesView, _super);\n\n  function LinesView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = LinesView.type;\n    return _this;\n  }\n\n  LinesView.prototype.render = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var lineDraw = this._updateLineDraw(data, seriesModel);\n\n    var zlevel = seriesModel.get('zlevel');\n    var trailLength = seriesModel.get(['effect', 'trailLength']);\n    var zr = api.getZr(); // Avoid the drag cause ghost shadow\n    // FIXME Better way ?\n    // SVG doesn't support\n\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg) {\n      zr.painter.getLayer(zlevel).clear(true);\n    } // Config layer with motion blur\n\n\n    if (this._lastZlevel != null && !isSvg) {\n      zr.configLayer(this._lastZlevel, {\n        motionBlur: false\n      });\n    }\n\n    if (this._showEffect(seriesModel) && trailLength) {\n      if (process.env.NODE_ENV !== 'production') {\n        var notInIndividual_1 = false;\n        ecModel.eachSeries(function (otherSeriesModel) {\n          if (otherSeriesModel !== seriesModel && otherSeriesModel.get('zlevel') === zlevel) {\n            notInIndividual_1 = true;\n          }\n        });\n        notInIndividual_1 && console.warn('Lines with trail effect should have an individual zlevel');\n      }\n\n      if (!isSvg) {\n        zr.configLayer(zlevel, {\n          motionBlur: true,\n          lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)\n        });\n      }\n    }\n\n    lineDraw.updateData(data);\n    var clipPath = seriesModel.get('clip', true) && createClipPath(seriesModel.coordinateSystem, false, seriesModel);\n\n    if (clipPath) {\n      this.group.setClipPath(clipPath);\n    } else {\n      this.group.removeClipPath();\n    }\n\n    this._lastZlevel = zlevel;\n    this._finished = true;\n  };\n\n  LinesView.prototype.incrementalPrepareRender = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var lineDraw = this._updateLineDraw(data, seriesModel);\n\n    lineDraw.incrementalPrepareUpdate(data);\n\n    this._clearLayer(api);\n\n    this._finished = false;\n  };\n\n  LinesView.prototype.incrementalRender = function (taskParams, seriesModel, ecModel) {\n    this._lineDraw.incrementalUpdate(taskParams, seriesModel.getData());\n\n    this._finished = taskParams.end === seriesModel.getData().count();\n  };\n\n  LinesView.prototype.updateTransform = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var pipelineContext = seriesModel.pipelineContext;\n\n    if (!this._finished || pipelineContext.large || pipelineContext.progressiveRender) {\n      // TODO Don't have to do update in large mode. Only do it when there are millions of data.\n      return {\n        update: true\n      };\n    } else {\n      // TODO Use same logic with ScatterView.\n      // Manually update layout\n      var res = linesLayout.reset(seriesModel, ecModel, api);\n\n      if (res.progress) {\n        res.progress({\n          start: 0,\n          end: data.count(),\n          count: data.count()\n        }, data);\n      } // Not in large mode\n\n\n      this._lineDraw.updateLayout();\n\n      this._clearLayer(api);\n    }\n  };\n\n  LinesView.prototype._updateLineDraw = function (data, seriesModel) {\n    var lineDraw = this._lineDraw;\n\n    var hasEffect = this._showEffect(seriesModel);\n\n    var isPolyline = !!seriesModel.get('polyline');\n    var pipelineContext = seriesModel.pipelineContext;\n    var isLargeDraw = pipelineContext.large;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (hasEffect && isLargeDraw) {\n        console.warn('Large lines not support effect');\n      }\n    }\n\n    if (!lineDraw || hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLargeDraw !== this._isLargeDraw) {\n      if (lineDraw) {\n        lineDraw.remove();\n      }\n\n      lineDraw = this._lineDraw = isLargeDraw ? new LargeLineDraw() : new LineDraw(isPolyline ? hasEffect ? EffectPolyline : Polyline : hasEffect ? EffectLine : Line);\n      this._hasEffet = hasEffect;\n      this._isPolyline = isPolyline;\n      this._isLargeDraw = isLargeDraw;\n      this.group.removeAll();\n    }\n\n    this.group.add(lineDraw.group);\n    return lineDraw;\n  };\n\n  LinesView.prototype._showEffect = function (seriesModel) {\n    return !!seriesModel.get(['effect', 'show']);\n  };\n\n  LinesView.prototype._clearLayer = function (api) {\n    // Not use motion when dragging or zooming\n    var zr = api.getZr();\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg && this._lastZlevel != null) {\n      zr.painter.getLayer(this._lastZlevel).clear(true);\n    }\n  };\n\n  LinesView.prototype.remove = function (ecModel, api) {\n    this._lineDraw && this._lineDraw.remove();\n    this._lineDraw = null; // Clear motion when lineDraw is removed\n\n    this._clearLayer(api);\n  };\n\n  LinesView.type = 'lines';\n  return LinesView;\n}(ChartView);\n\nexport default LinesView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}