{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as graphic from '../../util/graphic';\nimport AxisBuilder from './AxisBuilder';\nimport AxisView from './AxisView';\nimport * as cartesianAxisHelper from '../../coord/cartesian/cartesianAxisHelper';\nimport { rectCoordAxisBuildSplitArea, rectCoordAxisHandleRemove } from './axisSplitHelper';\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitArea', 'splitLine', 'minorSplitLine'];\n\nvar CartesianAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianAxisView, _super);\n\n  function CartesianAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianAxisView.type;\n    _this.axisPointerClass = 'CartesianAxisPointer';\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  CartesianAxisView.prototype.render = function (axisModel, ecModel, api, payload) {\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var gridModel = axisModel.getCoordSysModel();\n    var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, zrUtil.extend({\n      handleAutoShown: function (elementType) {\n        var cartesians = gridModel.coordinateSystem.getCartesians();\n\n        for (var i = 0; i < cartesians.length; i++) {\n          var otherAxisType = cartesians[i].getOtherAxis(axisModel.axis).type;\n\n          if (otherAxisType === 'value' || otherAxisType === 'log') {\n            // Still show axis tick or axisLine if other axis is value / log\n            return true;\n          }\n        } // Not show axisTick or axisLine if other axis is category / time\n\n\n        return false;\n      }\n    }, layout));\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (axisModel.get([name, 'show'])) {\n        axisElementBuilders[name](this, this._axisGroup, axisModel, gridModel);\n      }\n    }, this);\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n\n    _super.prototype.render.call(this, axisModel, ecModel, api, payload);\n  };\n\n  CartesianAxisView.prototype.remove = function () {\n    rectCoordAxisHandleRemove(this);\n  };\n\n  CartesianAxisView.type = 'cartesianAxis';\n  return CartesianAxisView;\n}(AxisView);\n\nvar axisElementBuilders = {\n  splitLine: function (axisView, axisGroup, axisModel, gridModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = [];\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      var tickValue = ticksCoords[i].tickValue;\n      axisGroup.add(new graphic.Line({\n        anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,\n        subPixelOptimize: true,\n        autoBatch: true,\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: zrUtil.defaults({\n          stroke: lineColors[colorIndex]\n        }, lineStyle),\n        silent: true\n      }));\n    }\n  },\n  minorSplitLine: function (axisView, axisGroup, axisModel, gridModel) {\n    var axis = axisModel.axis;\n    var minorSplitLineModel = axisModel.getModel('minorSplitLine');\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var minorTicksCoords = axis.getMinorTicksCoords();\n\n    if (!minorTicksCoords.length) {\n      return;\n    }\n\n    var p1 = [];\n    var p2 = [];\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < minorTicksCoords.length; i++) {\n      for (var k = 0; k < minorTicksCoords[i].length; k++) {\n        var tickCoord = axis.toGlobalCoord(minorTicksCoords[i][k].coord);\n\n        if (isHorizontal) {\n          p1[0] = tickCoord;\n          p1[1] = gridRect.y;\n          p2[0] = tickCoord;\n          p2[1] = gridRect.y + gridRect.height;\n        } else {\n          p1[0] = gridRect.x;\n          p1[1] = tickCoord;\n          p2[0] = gridRect.x + gridRect.width;\n          p2[1] = tickCoord;\n        }\n\n        axisGroup.add(new graphic.Line({\n          anid: 'minor_line_' + minorTicksCoords[i][k].tickValue,\n          subPixelOptimize: true,\n          autoBatch: true,\n          shape: {\n            x1: p1[0],\n            y1: p1[1],\n            x2: p2[0],\n            y2: p2[1]\n          },\n          style: lineStyle,\n          silent: true\n        }));\n      }\n    }\n  },\n  splitArea: function (axisView, axisGroup, axisModel, gridModel) {\n    rectCoordAxisBuildSplitArea(axisView, axisGroup, axisModel, gridModel);\n  }\n};\n\nvar CartesianXAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianXAxisView, _super);\n\n  function CartesianXAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianXAxisView.type;\n    return _this;\n  }\n\n  CartesianXAxisView.type = 'xAxis';\n  return CartesianXAxisView;\n}(CartesianAxisView);\n\nexport { CartesianXAxisView };\n\nvar CartesianYAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianYAxisView, _super);\n\n  function CartesianYAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianXAxisView.type;\n    return _this;\n  }\n\n  CartesianYAxisView.type = 'yAxis';\n  return CartesianYAxisView;\n}(CartesianAxisView);\n\nexport { CartesianYAxisView };\nexport default CartesianAxisView;","map":{"version":3,"names":["__extends","zrUtil","graphic","AxisBuilder","AxisView","cartesianAxisHelper","rectCoordAxisBuildSplitArea","rectCoordAxisHandleRemove","axisBuilderAttrs","selfBuilderAttrs","CartesianAxisView","_super","_this","apply","arguments","type","axisPointerClass","prototype","render","axisModel","ecModel","api","payload","group","removeAll","oldAxisGroup","_axisGroup","Group","add","get","gridModel","getCoordSysModel","layout","axisBuilder","extend","handleAutoShown","elementType","cartesians","coordinateSystem","getCartesians","i","length","otherAxisType","getOtherAxis","axis","each","getGroup","name","axisElementBuilders","groupTransition","call","remove","splitLine","axisView","axisGroup","scale","isBlank","splitLineModel","getModel","lineStyleModel","lineColors","isArray","gridRect","getRect","isHorizontal","lineCount","ticksCoords","getTicksCoords","tickModel","p1","p2","lineStyle","getLineStyle","tickCoord","toGlobalCoord","coord","y","height","x","width","colorIndex","tickValue","Line","anid","subPixelOptimize","autoBatch","shape","x1","y1","x2","y2","style","defaults","stroke","silent","minorSplitLine","minorSplitLineModel","minorTicksCoords","getMinorTicksCoords","k","splitArea","CartesianXAxisView","CartesianYAxisView"],"sources":["E:/school/qianduan/web/vue-manage/node_modules/echarts/lib/component/axis/CartesianAxisView.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as graphic from '../../util/graphic';\nimport AxisBuilder from './AxisBuilder';\nimport AxisView from './AxisView';\nimport * as cartesianAxisHelper from '../../coord/cartesian/cartesianAxisHelper';\nimport { rectCoordAxisBuildSplitArea, rectCoordAxisHandleRemove } from './axisSplitHelper';\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitArea', 'splitLine', 'minorSplitLine'];\n\nvar CartesianAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianAxisView, _super);\n\n  function CartesianAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianAxisView.type;\n    _this.axisPointerClass = 'CartesianAxisPointer';\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  CartesianAxisView.prototype.render = function (axisModel, ecModel, api, payload) {\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var gridModel = axisModel.getCoordSysModel();\n    var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, zrUtil.extend({\n      handleAutoShown: function (elementType) {\n        var cartesians = gridModel.coordinateSystem.getCartesians();\n\n        for (var i = 0; i < cartesians.length; i++) {\n          var otherAxisType = cartesians[i].getOtherAxis(axisModel.axis).type;\n\n          if (otherAxisType === 'value' || otherAxisType === 'log') {\n            // Still show axis tick or axisLine if other axis is value / log\n            return true;\n          }\n        } // Not show axisTick or axisLine if other axis is category / time\n\n\n        return false;\n      }\n    }, layout));\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (axisModel.get([name, 'show'])) {\n        axisElementBuilders[name](this, this._axisGroup, axisModel, gridModel);\n      }\n    }, this);\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n\n    _super.prototype.render.call(this, axisModel, ecModel, api, payload);\n  };\n\n  CartesianAxisView.prototype.remove = function () {\n    rectCoordAxisHandleRemove(this);\n  };\n\n  CartesianAxisView.type = 'cartesianAxis';\n  return CartesianAxisView;\n}(AxisView);\n\nvar axisElementBuilders = {\n  splitLine: function (axisView, axisGroup, axisModel, gridModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = [];\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      var tickValue = ticksCoords[i].tickValue;\n      axisGroup.add(new graphic.Line({\n        anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,\n        subPixelOptimize: true,\n        autoBatch: true,\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: zrUtil.defaults({\n          stroke: lineColors[colorIndex]\n        }, lineStyle),\n        silent: true\n      }));\n    }\n  },\n  minorSplitLine: function (axisView, axisGroup, axisModel, gridModel) {\n    var axis = axisModel.axis;\n    var minorSplitLineModel = axisModel.getModel('minorSplitLine');\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var minorTicksCoords = axis.getMinorTicksCoords();\n\n    if (!minorTicksCoords.length) {\n      return;\n    }\n\n    var p1 = [];\n    var p2 = [];\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < minorTicksCoords.length; i++) {\n      for (var k = 0; k < minorTicksCoords[i].length; k++) {\n        var tickCoord = axis.toGlobalCoord(minorTicksCoords[i][k].coord);\n\n        if (isHorizontal) {\n          p1[0] = tickCoord;\n          p1[1] = gridRect.y;\n          p2[0] = tickCoord;\n          p2[1] = gridRect.y + gridRect.height;\n        } else {\n          p1[0] = gridRect.x;\n          p1[1] = tickCoord;\n          p2[0] = gridRect.x + gridRect.width;\n          p2[1] = tickCoord;\n        }\n\n        axisGroup.add(new graphic.Line({\n          anid: 'minor_line_' + minorTicksCoords[i][k].tickValue,\n          subPixelOptimize: true,\n          autoBatch: true,\n          shape: {\n            x1: p1[0],\n            y1: p1[1],\n            x2: p2[0],\n            y2: p2[1]\n          },\n          style: lineStyle,\n          silent: true\n        }));\n      }\n    }\n  },\n  splitArea: function (axisView, axisGroup, axisModel, gridModel) {\n    rectCoordAxisBuildSplitArea(axisView, axisGroup, axisModel, gridModel);\n  }\n};\n\nvar CartesianXAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianXAxisView, _super);\n\n  function CartesianXAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianXAxisView.type;\n    return _this;\n  }\n\n  CartesianXAxisView.type = 'xAxis';\n  return CartesianXAxisView;\n}(CartesianAxisView);\n\nexport { CartesianXAxisView };\n\nvar CartesianYAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianYAxisView, _super);\n\n  function CartesianYAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianXAxisView.type;\n    return _this;\n  }\n\n  CartesianYAxisView.type = 'yAxis';\n  return CartesianYAxisView;\n}(CartesianAxisView);\n\nexport { CartesianYAxisView };\nexport default CartesianAxisView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}