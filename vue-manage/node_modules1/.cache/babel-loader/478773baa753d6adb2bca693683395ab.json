{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Tree data structure\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport linkList from './helper/linkList';\nimport List from './List';\nimport createDimensions from './helper/createDimensions';\nimport { convertOptionIdName } from '../util/model';\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode(name, hostTree) {\n    this.depth = 0;\n    this.height = 0;\n    /**\n     * Reference to list item.\n     * Do not persistent dataIndex outside,\n     * besause it may be changed by list.\n     * If dataIndex -1,\n     * this node is logical deleted (filtered) in list.\n     */\n\n    this.dataIndex = -1;\n    this.children = [];\n    this.viewChildren = [];\n    this.isExpand = false;\n    this.name = name || '';\n    this.hostTree = hostTree;\n  }\n  /**\n   * The node is removed.\n   */\n\n\n  TreeNode.prototype.isRemoved = function () {\n    return this.dataIndex < 0;\n  };\n\n  TreeNode.prototype.eachNode = function (options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  };\n  /**\n   * Update depth and height of this subtree.\n   */\n\n\n  TreeNode.prototype.updateDepthAndHeight = function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  };\n\n  TreeNode.prototype.getNodeById = function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n\n  TreeNode.prototype.contains = function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n  /**\n   * @param includeSelf Default false.\n   * @return order: [root, child, grandchild, ...]\n   */\n\n\n  TreeNode.prototype.getAncestors = function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  };\n\n  TreeNode.prototype.getAncestorsIndices = function () {\n    var indices = [];\n    var currNode = this;\n\n    while (currNode) {\n      indices.push(currNode.dataIndex);\n      currNode = currNode.parentNode;\n    }\n\n    indices.reverse();\n    return indices;\n  };\n\n  TreeNode.prototype.getDescendantIndices = function () {\n    var indices = [];\n    this.eachNode(function (childNode) {\n      indices.push(childNode.dataIndex);\n    });\n    return indices;\n  };\n\n  TreeNode.prototype.getValue = function (dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  };\n\n  TreeNode.prototype.setLayout = function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  };\n  /**\n   * @return {Object} layout\n   */\n\n\n  TreeNode.prototype.getLayout = function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  }; // @depcrecated\n  // getModel<T = unknown, S extends keyof T = keyof T>(path: S): Model<T[S]>\n\n\n  TreeNode.prototype.getModel = function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  }; // TODO: TYPE More specific model\n\n\n  TreeNode.prototype.getLevelModel = function () {\n    return (this.hostTree.levelModels || [])[this.depth];\n  };\n\n  TreeNode.prototype.setVisual = function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  };\n  /**\n   * Get item visual\n   * FIXME: make return type better\n   */\n\n\n  TreeNode.prototype.getVisual = function (key) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key);\n  };\n\n  TreeNode.prototype.getRawIndex = function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  };\n\n  TreeNode.prototype.getId = function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  };\n  /**\n   * if this is an ancestor of another node\n   *\n   * @param node another node\n   * @return if is ancestor\n   */\n\n\n  TreeNode.prototype.isAncestorOf = function (node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  };\n  /**\n   * if this is an descendant of another node\n   *\n   * @param node another node\n   * @return if is descendant\n   */\n\n\n  TreeNode.prototype.isDescendantOf = function (node) {\n    return node !== this && node.isAncestorOf(this);\n  };\n\n  return TreeNode;\n}();\n\nexport { TreeNode };\n;\n\nvar Tree =\n/** @class */\nfunction () {\n  function Tree(hostModel) {\n    this.type = 'tree';\n    this._nodes = [];\n    this.hostModel = hostModel;\n  }\n\n  Tree.prototype.eachNode = function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  };\n\n  Tree.prototype.getNodeByDataIndex = function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  };\n\n  Tree.prototype.getNodeById = function (name) {\n    return this.root.getNodeById(name);\n  };\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n\n\n  Tree.prototype.update = function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  };\n  /**\n   * Clear all layouts\n   */\n\n\n  Tree.prototype.clearLayouts = function () {\n    this.data.clearItemLayouts();\n  };\n  /**\n   * data node format:\n   * {\n   *     name: ...\n   *     value: ...\n   *     children: [\n   *         {\n   *             name: ...\n   *             value: ...\n   *             children: ...\n   *         },\n   *         ...\n   *     ]\n   * }\n   */\n\n\n  Tree.createTree = function (dataRoot, hostModel, beforeLink) {\n    var tree = new Tree(hostModel);\n    var listData = [];\n    var dimMax = 1;\n    buildHierarchy(dataRoot);\n\n    function buildHierarchy(dataNode, parentNode) {\n      var value = dataNode.value;\n      dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n      listData.push(dataNode);\n      var node = new TreeNode(convertOptionIdName(dataNode.name, ''), tree);\n      parentNode ? addChild(node, parentNode) : tree.root = node;\n\n      tree._nodes.push(node);\n\n      var children = dataNode.children;\n\n      if (children) {\n        for (var i = 0; i < children.length; i++) {\n          buildHierarchy(children[i], node);\n        }\n      }\n    }\n\n    tree.root.updateDepthAndHeight(0);\n    var dimensionsInfo = createDimensions(listData, {\n      coordDimensions: ['value'],\n      dimensionsCount: dimMax\n    });\n    var list = new List(dimensionsInfo, hostModel);\n    list.initData(listData);\n    beforeLink && beforeLink(list);\n    linkList({\n      mainData: list,\n      struct: tree,\n      structAttr: 'tree'\n    });\n    tree.update();\n    return tree;\n  };\n\n  return Tree;\n}();\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nexport default Tree;","map":{"version":3,"names":["zrUtil","linkList","List","createDimensions","convertOptionIdName","TreeNode","name","hostTree","depth","height","dataIndex","children","viewChildren","isExpand","prototype","isRemoved","eachNode","options","cb","context","isString","order","attr","suppressVisitSub","call","i","length","updateDepthAndHeight","child","getNodeById","id","getId","len","res","contains","node","getAncestors","includeSelf","ancestors","parentNode","push","reverse","getAncestorsIndices","indices","currNode","getDescendantIndices","childNode","getValue","dimension","data","get","getDimension","setLayout","layout","merge","setItemLayout","getLayout","getItemLayout","getModel","path","itemModel","getItemModel","getLevelModel","levelModels","setVisual","key","value","setItemVisual","getVisual","getItemVisual","getRawIndex","isAncestorOf","parent","isDescendantOf","Tree","hostModel","type","_nodes","root","getNodeByDataIndex","rawIndex","update","nodes","count","clearLayouts","clearItemLayouts","createTree","dataRoot","beforeLink","tree","listData","dimMax","buildHierarchy","dataNode","Math","max","isArray","addChild","dimensionsInfo","coordDimensions","dimensionsCount","list","initData","mainData","struct","structAttr"],"sources":["E:/school/qianduan/web/vue-manage/node_modules/echarts/lib/data/Tree.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Tree data structure\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport linkList from './helper/linkList';\nimport List from './List';\nimport createDimensions from './helper/createDimensions';\nimport { convertOptionIdName } from '../util/model';\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode(name, hostTree) {\n    this.depth = 0;\n    this.height = 0;\n    /**\n     * Reference to list item.\n     * Do not persistent dataIndex outside,\n     * besause it may be changed by list.\n     * If dataIndex -1,\n     * this node is logical deleted (filtered) in list.\n     */\n\n    this.dataIndex = -1;\n    this.children = [];\n    this.viewChildren = [];\n    this.isExpand = false;\n    this.name = name || '';\n    this.hostTree = hostTree;\n  }\n  /**\n   * The node is removed.\n   */\n\n\n  TreeNode.prototype.isRemoved = function () {\n    return this.dataIndex < 0;\n  };\n\n  TreeNode.prototype.eachNode = function (options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  };\n  /**\n   * Update depth and height of this subtree.\n   */\n\n\n  TreeNode.prototype.updateDepthAndHeight = function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  };\n\n  TreeNode.prototype.getNodeById = function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n\n  TreeNode.prototype.contains = function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n  /**\n   * @param includeSelf Default false.\n   * @return order: [root, child, grandchild, ...]\n   */\n\n\n  TreeNode.prototype.getAncestors = function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  };\n\n  TreeNode.prototype.getAncestorsIndices = function () {\n    var indices = [];\n    var currNode = this;\n\n    while (currNode) {\n      indices.push(currNode.dataIndex);\n      currNode = currNode.parentNode;\n    }\n\n    indices.reverse();\n    return indices;\n  };\n\n  TreeNode.prototype.getDescendantIndices = function () {\n    var indices = [];\n    this.eachNode(function (childNode) {\n      indices.push(childNode.dataIndex);\n    });\n    return indices;\n  };\n\n  TreeNode.prototype.getValue = function (dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  };\n\n  TreeNode.prototype.setLayout = function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  };\n  /**\n   * @return {Object} layout\n   */\n\n\n  TreeNode.prototype.getLayout = function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  }; // @depcrecated\n  // getModel<T = unknown, S extends keyof T = keyof T>(path: S): Model<T[S]>\n\n\n  TreeNode.prototype.getModel = function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  }; // TODO: TYPE More specific model\n\n\n  TreeNode.prototype.getLevelModel = function () {\n    return (this.hostTree.levelModels || [])[this.depth];\n  };\n\n  TreeNode.prototype.setVisual = function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  };\n  /**\n   * Get item visual\n   * FIXME: make return type better\n   */\n\n\n  TreeNode.prototype.getVisual = function (key) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key);\n  };\n\n  TreeNode.prototype.getRawIndex = function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  };\n\n  TreeNode.prototype.getId = function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  };\n  /**\n   * if this is an ancestor of another node\n   *\n   * @param node another node\n   * @return if is ancestor\n   */\n\n\n  TreeNode.prototype.isAncestorOf = function (node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  };\n  /**\n   * if this is an descendant of another node\n   *\n   * @param node another node\n   * @return if is descendant\n   */\n\n\n  TreeNode.prototype.isDescendantOf = function (node) {\n    return node !== this && node.isAncestorOf(this);\n  };\n\n  return TreeNode;\n}();\n\nexport { TreeNode };\n;\n\nvar Tree =\n/** @class */\nfunction () {\n  function Tree(hostModel) {\n    this.type = 'tree';\n    this._nodes = [];\n    this.hostModel = hostModel;\n  }\n\n  Tree.prototype.eachNode = function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  };\n\n  Tree.prototype.getNodeByDataIndex = function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  };\n\n  Tree.prototype.getNodeById = function (name) {\n    return this.root.getNodeById(name);\n  };\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n\n\n  Tree.prototype.update = function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  };\n  /**\n   * Clear all layouts\n   */\n\n\n  Tree.prototype.clearLayouts = function () {\n    this.data.clearItemLayouts();\n  };\n  /**\n   * data node format:\n   * {\n   *     name: ...\n   *     value: ...\n   *     children: [\n   *         {\n   *             name: ...\n   *             value: ...\n   *             children: ...\n   *         },\n   *         ...\n   *     ]\n   * }\n   */\n\n\n  Tree.createTree = function (dataRoot, hostModel, beforeLink) {\n    var tree = new Tree(hostModel);\n    var listData = [];\n    var dimMax = 1;\n    buildHierarchy(dataRoot);\n\n    function buildHierarchy(dataNode, parentNode) {\n      var value = dataNode.value;\n      dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n      listData.push(dataNode);\n      var node = new TreeNode(convertOptionIdName(dataNode.name, ''), tree);\n      parentNode ? addChild(node, parentNode) : tree.root = node;\n\n      tree._nodes.push(node);\n\n      var children = dataNode.children;\n\n      if (children) {\n        for (var i = 0; i < children.length; i++) {\n          buildHierarchy(children[i], node);\n        }\n      }\n    }\n\n    tree.root.updateDepthAndHeight(0);\n    var dimensionsInfo = createDimensions(listData, {\n      coordDimensions: ['value'],\n      dimensionsCount: dimMax\n    });\n    var list = new List(dimensionsInfo, hostModel);\n    list.initData(listData);\n    beforeLink && beforeLink(list);\n    linkList({\n      mainData: list,\n      struct: tree,\n      structAttr: 'tree'\n    });\n    tree.update();\n    return tree;\n  };\n\n  return Tree;\n}();\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nexport default Tree;"],"mappings":"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"},"metadata":{},"sourceType":"module"}