{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO clockwise\nimport IndicatorAxis from './IndicatorAxis';\nimport IntervalScale from '../../scale/Interval';\nimport * as numberUtil from '../../util/number';\nimport { getScaleExtent, niceScaleExtent } from '../axisHelper';\nimport { parseAxisModelMinMax } from '../scaleRawExtentInfo';\nimport { map, each } from 'zrender/lib/core/util';\n\nvar Radar =\n/** @class */\nfunction () {\n  function Radar(radarModel, ecModel, api) {\n    /**\n     *\n     * Radar dimensions\n     */\n    this.dimensions = [];\n    this._model = radarModel;\n    this._indicatorAxes = map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {\n      var dim = 'indicator_' + idx;\n      var indicatorAxis = new IndicatorAxis(dim, new IntervalScale() // (indicatorModel.get('axisType') === 'log') ? new LogScale() : new IntervalScale()\n      );\n      indicatorAxis.name = indicatorModel.get('name'); // Inject model and axis\n\n      indicatorAxis.model = indicatorModel;\n      indicatorModel.axis = indicatorAxis;\n      this.dimensions.push(dim);\n      return indicatorAxis;\n    }, this);\n    this.resize(radarModel, api);\n  }\n\n  Radar.prototype.getIndicatorAxes = function () {\n    return this._indicatorAxes;\n  };\n\n  Radar.prototype.dataToPoint = function (value, indicatorIndex) {\n    var indicatorAxis = this._indicatorAxes[indicatorIndex];\n    return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);\n  }; // TODO: API should be coordToPoint([coord, indicatorIndex])\n\n\n  Radar.prototype.coordToPoint = function (coord, indicatorIndex) {\n    var indicatorAxis = this._indicatorAxes[indicatorIndex];\n    var angle = indicatorAxis.angle;\n    var x = this.cx + coord * Math.cos(angle);\n    var y = this.cy - coord * Math.sin(angle);\n    return [x, y];\n  };\n\n  Radar.prototype.pointToData = function (pt) {\n    var dx = pt[0] - this.cx;\n    var dy = pt[1] - this.cy;\n    var radius = Math.sqrt(dx * dx + dy * dy);\n    dx /= radius;\n    dy /= radius;\n    var radian = Math.atan2(-dy, dx); // Find the closest angle\n    // FIXME index can calculated directly\n\n    var minRadianDiff = Infinity;\n    var closestAxis;\n    var closestAxisIdx = -1;\n\n    for (var i = 0; i < this._indicatorAxes.length; i++) {\n      var indicatorAxis = this._indicatorAxes[i];\n      var diff = Math.abs(radian - indicatorAxis.angle);\n\n      if (diff < minRadianDiff) {\n        closestAxis = indicatorAxis;\n        closestAxisIdx = i;\n        minRadianDiff = diff;\n      }\n    }\n\n    return [closestAxisIdx, +(closestAxis && closestAxis.coordToData(radius))];\n  };\n\n  Radar.prototype.resize = function (radarModel, api) {\n    var center = radarModel.get('center');\n    var viewWidth = api.getWidth();\n    var viewHeight = api.getHeight();\n    var viewSize = Math.min(viewWidth, viewHeight) / 2;\n    this.cx = numberUtil.parsePercent(center[0], viewWidth);\n    this.cy = numberUtil.parsePercent(center[1], viewHeight);\n    this.startAngle = radarModel.get('startAngle') * Math.PI / 180; // radius may be single value like `20`, `'80%'`, or array like `[10, '80%']`\n\n    var radius = radarModel.get('radius');\n\n    if (typeof radius === 'string' || typeof radius === 'number') {\n      radius = [0, radius];\n    }\n\n    this.r0 = numberUtil.parsePercent(radius[0], viewSize);\n    this.r = numberUtil.parsePercent(radius[1], viewSize);\n    each(this._indicatorAxes, function (indicatorAxis, idx) {\n      indicatorAxis.setExtent(this.r0, this.r);\n      var angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length; // Normalize to [-PI, PI]\n\n      angle = Math.atan2(Math.sin(angle), Math.cos(angle));\n      indicatorAxis.angle = angle;\n    }, this);\n  };\n\n  Radar.prototype.update = function (ecModel, api) {\n    var indicatorAxes = this._indicatorAxes;\n    var radarModel = this._model;\n    each(indicatorAxes, function (indicatorAxis) {\n      indicatorAxis.scale.setExtent(Infinity, -Infinity);\n    });\n    ecModel.eachSeriesByType('radar', function (radarSeries, idx) {\n      if (radarSeries.get('coordinateSystem') !== 'radar' // @ts-ignore\n      || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel) {\n        return;\n      }\n\n      var data = radarSeries.getData();\n      each(indicatorAxes, function (indicatorAxis) {\n        indicatorAxis.scale.unionExtentFromData(data, data.mapDimension(indicatorAxis.dim));\n      });\n    }, this);\n    var splitNumber = radarModel.get('splitNumber');\n\n    function increaseInterval(interval) {\n      var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10)); // Increase interval\n\n      var f = interval / exp10;\n\n      if (f === 2) {\n        f = 5;\n      } else {\n        // f is 2 or 5\n        f *= 2;\n      }\n\n      return f * exp10;\n    } // Force all the axis fixing the maxSplitNumber.\n\n\n    each(indicatorAxes, function (indicatorAxis, idx) {\n      var rawExtent = getScaleExtent(indicatorAxis.scale, indicatorAxis.model).extent;\n      niceScaleExtent(indicatorAxis.scale, indicatorAxis.model);\n      var axisModel = indicatorAxis.model;\n      var scale = indicatorAxis.scale;\n      var fixedMin = parseAxisModelMinMax(scale, axisModel.get('min', true));\n      var fixedMax = parseAxisModelMinMax(scale, axisModel.get('max', true));\n      var interval = scale.getInterval();\n\n      if (fixedMin != null && fixedMax != null) {\n        // User set min, max, divide to get new interval\n        scale.setExtent(+fixedMin, +fixedMax);\n        scale.setInterval((fixedMax - fixedMin) / splitNumber);\n      } else if (fixedMin != null) {\n        var max = void 0; // User set min, expand extent on the other side\n\n        do {\n          max = fixedMin + interval * splitNumber;\n          scale.setExtent(+fixedMin, max); // Interval must been set after extent\n          // FIXME\n\n          scale.setInterval(interval);\n          interval = increaseInterval(interval);\n        } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));\n      } else if (fixedMax != null) {\n        var min = void 0; // User set min, expand extent on the other side\n\n        do {\n          min = fixedMax - interval * splitNumber;\n          scale.setExtent(min, +fixedMax);\n          scale.setInterval(interval);\n          interval = increaseInterval(interval);\n        } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));\n      } else {\n        var nicedSplitNumber = scale.getTicks().length - 1;\n\n        if (nicedSplitNumber > splitNumber) {\n          interval = increaseInterval(interval);\n        } // TODO\n\n\n        var max = Math.ceil(rawExtent[1] / interval) * interval;\n        var min = numberUtil.round(max - interval * splitNumber);\n        scale.setExtent(min, max);\n        scale.setInterval(interval);\n      }\n    });\n  };\n\n  Radar.prototype.convertToPixel = function (ecModel, finder, value) {\n    console.warn('Not implemented.');\n    return null;\n  };\n\n  Radar.prototype.convertFromPixel = function (ecModel, finder, pixel) {\n    console.warn('Not implemented.');\n    return null;\n  };\n\n  Radar.prototype.containPoint = function (point) {\n    console.warn('Not implemented.');\n    return false;\n  };\n\n  Radar.create = function (ecModel, api) {\n    var radarList = [];\n    ecModel.eachComponent('radar', function (radarModel) {\n      var radar = new Radar(radarModel, ecModel, api);\n      radarList.push(radar);\n      radarModel.coordinateSystem = radar;\n    });\n    ecModel.eachSeriesByType('radar', function (radarSeries) {\n      if (radarSeries.get('coordinateSystem') === 'radar') {\n        // Inject coordinate system\n        // @ts-ignore\n        radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];\n      }\n    });\n    return radarList;\n  };\n  /**\n   * Radar dimensions is based on the data\n   */\n\n\n  Radar.dimensions = [];\n  return Radar;\n}();\n\nexport default Radar;","map":{"version":3,"names":["IndicatorAxis","IntervalScale","numberUtil","getScaleExtent","niceScaleExtent","parseAxisModelMinMax","map","each","Radar","radarModel","ecModel","api","dimensions","_model","_indicatorAxes","getIndicatorModels","indicatorModel","idx","dim","indicatorAxis","name","get","model","axis","push","resize","prototype","getIndicatorAxes","dataToPoint","value","indicatorIndex","coordToPoint","dataToCoord","coord","angle","x","cx","Math","cos","y","cy","sin","pointToData","pt","dx","dy","radius","sqrt","radian","atan2","minRadianDiff","Infinity","closestAxis","closestAxisIdx","i","length","diff","abs","coordToData","center","viewWidth","getWidth","viewHeight","getHeight","viewSize","min","parsePercent","startAngle","PI","r0","r","setExtent","update","indicatorAxes","scale","eachSeriesByType","radarSeries","getComponent","data","getData","unionExtentFromData","mapDimension","splitNumber","increaseInterval","interval","exp10","pow","floor","log","LN10","f","rawExtent","extent","axisModel","fixedMin","fixedMax","getInterval","setInterval","max","isFinite","nicedSplitNumber","getTicks","ceil","round","convertToPixel","finder","console","warn","convertFromPixel","pixel","containPoint","point","create","radarList","eachComponent","radar","coordinateSystem"],"sources":["E:/school/qianduan/web/vue-manage/node_modules/echarts/lib/coord/radar/Radar.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO clockwise\nimport IndicatorAxis from './IndicatorAxis';\nimport IntervalScale from '../../scale/Interval';\nimport * as numberUtil from '../../util/number';\nimport { getScaleExtent, niceScaleExtent } from '../axisHelper';\nimport { parseAxisModelMinMax } from '../scaleRawExtentInfo';\nimport { map, each } from 'zrender/lib/core/util';\n\nvar Radar =\n/** @class */\nfunction () {\n  function Radar(radarModel, ecModel, api) {\n    /**\n     *\n     * Radar dimensions\n     */\n    this.dimensions = [];\n    this._model = radarModel;\n    this._indicatorAxes = map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {\n      var dim = 'indicator_' + idx;\n      var indicatorAxis = new IndicatorAxis(dim, new IntervalScale() // (indicatorModel.get('axisType') === 'log') ? new LogScale() : new IntervalScale()\n      );\n      indicatorAxis.name = indicatorModel.get('name'); // Inject model and axis\n\n      indicatorAxis.model = indicatorModel;\n      indicatorModel.axis = indicatorAxis;\n      this.dimensions.push(dim);\n      return indicatorAxis;\n    }, this);\n    this.resize(radarModel, api);\n  }\n\n  Radar.prototype.getIndicatorAxes = function () {\n    return this._indicatorAxes;\n  };\n\n  Radar.prototype.dataToPoint = function (value, indicatorIndex) {\n    var indicatorAxis = this._indicatorAxes[indicatorIndex];\n    return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);\n  }; // TODO: API should be coordToPoint([coord, indicatorIndex])\n\n\n  Radar.prototype.coordToPoint = function (coord, indicatorIndex) {\n    var indicatorAxis = this._indicatorAxes[indicatorIndex];\n    var angle = indicatorAxis.angle;\n    var x = this.cx + coord * Math.cos(angle);\n    var y = this.cy - coord * Math.sin(angle);\n    return [x, y];\n  };\n\n  Radar.prototype.pointToData = function (pt) {\n    var dx = pt[0] - this.cx;\n    var dy = pt[1] - this.cy;\n    var radius = Math.sqrt(dx * dx + dy * dy);\n    dx /= radius;\n    dy /= radius;\n    var radian = Math.atan2(-dy, dx); // Find the closest angle\n    // FIXME index can calculated directly\n\n    var minRadianDiff = Infinity;\n    var closestAxis;\n    var closestAxisIdx = -1;\n\n    for (var i = 0; i < this._indicatorAxes.length; i++) {\n      var indicatorAxis = this._indicatorAxes[i];\n      var diff = Math.abs(radian - indicatorAxis.angle);\n\n      if (diff < minRadianDiff) {\n        closestAxis = indicatorAxis;\n        closestAxisIdx = i;\n        minRadianDiff = diff;\n      }\n    }\n\n    return [closestAxisIdx, +(closestAxis && closestAxis.coordToData(radius))];\n  };\n\n  Radar.prototype.resize = function (radarModel, api) {\n    var center = radarModel.get('center');\n    var viewWidth = api.getWidth();\n    var viewHeight = api.getHeight();\n    var viewSize = Math.min(viewWidth, viewHeight) / 2;\n    this.cx = numberUtil.parsePercent(center[0], viewWidth);\n    this.cy = numberUtil.parsePercent(center[1], viewHeight);\n    this.startAngle = radarModel.get('startAngle') * Math.PI / 180; // radius may be single value like `20`, `'80%'`, or array like `[10, '80%']`\n\n    var radius = radarModel.get('radius');\n\n    if (typeof radius === 'string' || typeof radius === 'number') {\n      radius = [0, radius];\n    }\n\n    this.r0 = numberUtil.parsePercent(radius[0], viewSize);\n    this.r = numberUtil.parsePercent(radius[1], viewSize);\n    each(this._indicatorAxes, function (indicatorAxis, idx) {\n      indicatorAxis.setExtent(this.r0, this.r);\n      var angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length; // Normalize to [-PI, PI]\n\n      angle = Math.atan2(Math.sin(angle), Math.cos(angle));\n      indicatorAxis.angle = angle;\n    }, this);\n  };\n\n  Radar.prototype.update = function (ecModel, api) {\n    var indicatorAxes = this._indicatorAxes;\n    var radarModel = this._model;\n    each(indicatorAxes, function (indicatorAxis) {\n      indicatorAxis.scale.setExtent(Infinity, -Infinity);\n    });\n    ecModel.eachSeriesByType('radar', function (radarSeries, idx) {\n      if (radarSeries.get('coordinateSystem') !== 'radar' // @ts-ignore\n      || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel) {\n        return;\n      }\n\n      var data = radarSeries.getData();\n      each(indicatorAxes, function (indicatorAxis) {\n        indicatorAxis.scale.unionExtentFromData(data, data.mapDimension(indicatorAxis.dim));\n      });\n    }, this);\n    var splitNumber = radarModel.get('splitNumber');\n\n    function increaseInterval(interval) {\n      var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10)); // Increase interval\n\n      var f = interval / exp10;\n\n      if (f === 2) {\n        f = 5;\n      } else {\n        // f is 2 or 5\n        f *= 2;\n      }\n\n      return f * exp10;\n    } // Force all the axis fixing the maxSplitNumber.\n\n\n    each(indicatorAxes, function (indicatorAxis, idx) {\n      var rawExtent = getScaleExtent(indicatorAxis.scale, indicatorAxis.model).extent;\n      niceScaleExtent(indicatorAxis.scale, indicatorAxis.model);\n      var axisModel = indicatorAxis.model;\n      var scale = indicatorAxis.scale;\n      var fixedMin = parseAxisModelMinMax(scale, axisModel.get('min', true));\n      var fixedMax = parseAxisModelMinMax(scale, axisModel.get('max', true));\n      var interval = scale.getInterval();\n\n      if (fixedMin != null && fixedMax != null) {\n        // User set min, max, divide to get new interval\n        scale.setExtent(+fixedMin, +fixedMax);\n        scale.setInterval((fixedMax - fixedMin) / splitNumber);\n      } else if (fixedMin != null) {\n        var max = void 0; // User set min, expand extent on the other side\n\n        do {\n          max = fixedMin + interval * splitNumber;\n          scale.setExtent(+fixedMin, max); // Interval must been set after extent\n          // FIXME\n\n          scale.setInterval(interval);\n          interval = increaseInterval(interval);\n        } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));\n      } else if (fixedMax != null) {\n        var min = void 0; // User set min, expand extent on the other side\n\n        do {\n          min = fixedMax - interval * splitNumber;\n          scale.setExtent(min, +fixedMax);\n          scale.setInterval(interval);\n          interval = increaseInterval(interval);\n        } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));\n      } else {\n        var nicedSplitNumber = scale.getTicks().length - 1;\n\n        if (nicedSplitNumber > splitNumber) {\n          interval = increaseInterval(interval);\n        } // TODO\n\n\n        var max = Math.ceil(rawExtent[1] / interval) * interval;\n        var min = numberUtil.round(max - interval * splitNumber);\n        scale.setExtent(min, max);\n        scale.setInterval(interval);\n      }\n    });\n  };\n\n  Radar.prototype.convertToPixel = function (ecModel, finder, value) {\n    console.warn('Not implemented.');\n    return null;\n  };\n\n  Radar.prototype.convertFromPixel = function (ecModel, finder, pixel) {\n    console.warn('Not implemented.');\n    return null;\n  };\n\n  Radar.prototype.containPoint = function (point) {\n    console.warn('Not implemented.');\n    return false;\n  };\n\n  Radar.create = function (ecModel, api) {\n    var radarList = [];\n    ecModel.eachComponent('radar', function (radarModel) {\n      var radar = new Radar(radarModel, ecModel, api);\n      radarList.push(radar);\n      radarModel.coordinateSystem = radar;\n    });\n    ecModel.eachSeriesByType('radar', function (radarSeries) {\n      if (radarSeries.get('coordinateSystem') === 'radar') {\n        // Inject coordinate system\n        // @ts-ignore\n        radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];\n      }\n    });\n    return radarList;\n  };\n  /**\n   * Radar dimensions is based on the data\n   */\n\n\n  Radar.dimensions = [];\n  return Radar;\n}();\n\nexport default Radar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}