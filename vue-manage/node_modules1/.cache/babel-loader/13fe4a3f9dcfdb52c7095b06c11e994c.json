{"ast":null,"code":"function diff(oldArr, newArr, equals) {\n  if (!equals) {\n    equals = function (a, b) {\n      return a === b;\n    };\n  }\n\n  oldArr = oldArr.slice();\n  newArr = newArr.slice();\n  var newLen = newArr.length;\n  var oldLen = oldArr.length;\n  var editLength = 1;\n  var maxEditLength = newLen + oldLen;\n  var bestPath = [{\n    newPos: -1,\n    components: []\n  }];\n  var oldPos = extractCommon(bestPath[0], newArr, oldArr, 0, equals);\n\n  if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n    var indices = [];\n\n    for (var i = 0; i < newArr.length; i++) {\n      indices.push(i);\n    }\n\n    return [{\n      indices: indices,\n      count: newArr.length,\n      added: false,\n      removed: false\n    }];\n  }\n\n  function execEditLength() {\n    for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n      var basePath;\n      var addPath = bestPath[diagonalPath - 1];\n      var removePath = bestPath[diagonalPath + 1];\n      var oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n\n      if (addPath) {\n        bestPath[diagonalPath - 1] = undefined;\n      }\n\n      var canAdd = addPath && addPath.newPos + 1 < newLen;\n      var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n\n      if (!canAdd && !canRemove) {\n        bestPath[diagonalPath] = undefined;\n        continue;\n      }\n\n      if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n        basePath = clonePath(removePath);\n        pushComponent(basePath.components, false, true);\n      } else {\n        basePath = addPath;\n        basePath.newPos++;\n        pushComponent(basePath.components, true, false);\n      }\n\n      oldPos = extractCommon(basePath, newArr, oldArr, diagonalPath, equals);\n\n      if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        return buildValues(basePath.components);\n      } else {\n        bestPath[diagonalPath] = basePath;\n      }\n    }\n\n    editLength++;\n  }\n\n  while (editLength <= maxEditLength) {\n    var ret = execEditLength();\n\n    if (ret) {\n      return ret;\n    }\n  }\n}\n\nfunction extractCommon(basePath, newArr, oldArr, diagonalPath, equals) {\n  var newLen = newArr.length;\n  var oldLen = oldArr.length;\n  var newPos = basePath.newPos;\n  var oldPos = newPos - diagonalPath;\n  var commonCount = 0;\n\n  while (newPos + 1 < newLen && oldPos + 1 < oldLen && equals(newArr[newPos + 1], oldArr[oldPos + 1])) {\n    newPos++;\n    oldPos++;\n    commonCount++;\n  }\n\n  if (commonCount) {\n    basePath.components.push({\n      count: commonCount,\n      added: false,\n      removed: false,\n      indices: []\n    });\n  }\n\n  basePath.newPos = newPos;\n  return oldPos;\n}\n\nfunction pushComponent(components, added, removed) {\n  var last = components[components.length - 1];\n\n  if (last && last.added === added && last.removed === removed) {\n    components[components.length - 1] = {\n      count: last.count + 1,\n      added: added,\n      removed: removed,\n      indices: []\n    };\n  } else {\n    components.push({\n      count: 1,\n      added: added,\n      removed: removed,\n      indices: []\n    });\n  }\n}\n\nfunction buildValues(components) {\n  var componentPos = 0;\n  var componentLen = components.length;\n  var newPos = 0;\n  var oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    var component = components[componentPos];\n\n    if (!component.removed) {\n      var indices = [];\n\n      for (var i = newPos; i < newPos + component.count; i++) {\n        indices.push(i);\n      }\n\n      component.indices = indices;\n      newPos += component.count;\n\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      for (var i = oldPos; i < oldPos + component.count; i++) {\n        component.indices.push(i);\n      }\n\n      oldPos += component.count;\n    }\n  }\n\n  return components;\n}\n\nfunction clonePath(path) {\n  return {\n    newPos: path.newPos,\n    components: path.components.slice(0)\n  };\n}\n\nexport default function arrayDiff(oldArr, newArr, equal) {\n  return diff(oldArr, newArr, equal);\n}","map":{"version":3,"names":["diff","oldArr","newArr","equals","a","b","slice","newLen","length","oldLen","editLength","maxEditLength","bestPath","newPos","components","oldPos","extractCommon","indices","i","push","count","added","removed","execEditLength","diagonalPath","basePath","addPath","removePath","undefined","canAdd","canRemove","clonePath","pushComponent","buildValues","ret","commonCount","last","componentPos","componentLen","component","path","arrayDiff","equal"],"sources":["E:/school/qianduan/web/vue-manage/node_modules/zrender/lib/core/arrayDiff.js"],"sourcesContent":["function diff(oldArr, newArr, equals) {\n    if (!equals) {\n        equals = function (a, b) {\n            return a === b;\n        };\n    }\n    oldArr = oldArr.slice();\n    newArr = newArr.slice();\n    var newLen = newArr.length;\n    var oldLen = oldArr.length;\n    var editLength = 1;\n    var maxEditLength = newLen + oldLen;\n    var bestPath = [{ newPos: -1, components: [] }];\n    var oldPos = extractCommon(bestPath[0], newArr, oldArr, 0, equals);\n    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        var indices = [];\n        for (var i = 0; i < newArr.length; i++) {\n            indices.push(i);\n        }\n        return [{\n                indices: indices,\n                count: newArr.length,\n                added: false,\n                removed: false\n            }];\n    }\n    function execEditLength() {\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n            var basePath;\n            var addPath = bestPath[diagonalPath - 1];\n            var removePath = bestPath[diagonalPath + 1];\n            var oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n            if (addPath) {\n                bestPath[diagonalPath - 1] = undefined;\n            }\n            var canAdd = addPath && addPath.newPos + 1 < newLen;\n            var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n            if (!canAdd && !canRemove) {\n                bestPath[diagonalPath] = undefined;\n                continue;\n            }\n            if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\n                basePath = clonePath(removePath);\n                pushComponent(basePath.components, false, true);\n            }\n            else {\n                basePath = addPath;\n                basePath.newPos++;\n                pushComponent(basePath.components, true, false);\n            }\n            oldPos = extractCommon(basePath, newArr, oldArr, diagonalPath, equals);\n            if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n                return buildValues(basePath.components);\n            }\n            else {\n                bestPath[diagonalPath] = basePath;\n            }\n        }\n        editLength++;\n    }\n    while (editLength <= maxEditLength) {\n        var ret = execEditLength();\n        if (ret) {\n            return ret;\n        }\n    }\n}\nfunction extractCommon(basePath, newArr, oldArr, diagonalPath, equals) {\n    var newLen = newArr.length;\n    var oldLen = oldArr.length;\n    var newPos = basePath.newPos;\n    var oldPos = newPos - diagonalPath;\n    var commonCount = 0;\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && equals(newArr[newPos + 1], oldArr[oldPos + 1])) {\n        newPos++;\n        oldPos++;\n        commonCount++;\n    }\n    if (commonCount) {\n        basePath.components.push({\n            count: commonCount,\n            added: false,\n            removed: false,\n            indices: []\n        });\n    }\n    basePath.newPos = newPos;\n    return oldPos;\n}\nfunction pushComponent(components, added, removed) {\n    var last = components[components.length - 1];\n    if (last && last.added === added && last.removed === removed) {\n        components[components.length - 1] = {\n            count: last.count + 1,\n            added: added,\n            removed: removed,\n            indices: []\n        };\n    }\n    else {\n        components.push({\n            count: 1,\n            added: added,\n            removed: removed,\n            indices: []\n        });\n    }\n}\nfunction buildValues(components) {\n    var componentPos = 0;\n    var componentLen = components.length;\n    var newPos = 0;\n    var oldPos = 0;\n    for (; componentPos < componentLen; componentPos++) {\n        var component = components[componentPos];\n        if (!component.removed) {\n            var indices = [];\n            for (var i = newPos; i < newPos + component.count; i++) {\n                indices.push(i);\n            }\n            component.indices = indices;\n            newPos += component.count;\n            if (!component.added) {\n                oldPos += component.count;\n            }\n        }\n        else {\n            for (var i = oldPos; i < oldPos + component.count; i++) {\n                component.indices.push(i);\n            }\n            oldPos += component.count;\n        }\n    }\n    return components;\n}\nfunction clonePath(path) {\n    return { newPos: path.newPos, components: path.components.slice(0) };\n}\nexport default function arrayDiff(oldArr, newArr, equal) {\n    return diff(oldArr, newArr, equal);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}